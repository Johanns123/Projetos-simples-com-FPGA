library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Contador_Hexadecimal is
	port(
		signal CLK_50 : in std_logic;
		signal RESET  : in std_logic;
		signal KEY	  : in std_logic_vector(3 downto 0);
		signal HEX1, HEX3, HEX2, HEX4	  : out std_logic;
		signal SEG	  : out std_logic_vector(6 downto 0);
		signal LEDY   : out std_logic_vector(3 downto 0)
	);
	
end entity Contador_Hexadecimal;


architecture hardware of blynk is

signal contador_led : unsigned (3 downto 0) := (others => '0');
signal led : std_logic_vector (3 downto 0);
signal clk : std_logic;
signal contador1, contador2 : unsigned (29 downto 0) := (others => '0');
signal dado : unsigned (3 downto 0) := (others => '0');
signal display : std_logic_vector(6 downto 0);
signal enable : std_logic := '1';

begin
		
	LEDY(0) <= not led(3);
	LEDY(1) <= not led(2);
	LEDY(2) <= not led(1);
	LEDY(3) <= not led(0);
	clk  <= CLK_50;
	HEX1 <= not enable;
	HEX2 <= '1';
	HEX3 <= '1';
	HEX4 <= '1';
	SEG <= not display;
	led <= std_logic_vector(contador_led);
	
	TICK : process (clk, RESET) is
	
	begin
		if RESET = '0' then
				contador1 <= (others => '0');
				contador_led <= (others => '0');
				dado <= (others => '0');
				enable <= '0';
		else
			if falling_edge(clk) then
				enable <= '1';
				if(contador1 < 49999999) then
					contador1 <= contador1 + 1;
				else
					contador1 <= (others => '0');
					contador_led <= contador_led + 1;
					dado <= dado + 1;
				end if;
			end if;
		end if;
	end process TICK;
	
	
	with dado select 
		display <= 
		"0111111" when "0000",
		"0000110" when "0001",
		"1011011" when "0010",
		"1001111" when "0011",
		"1100110" when "0100",
		"1101101" when "0101",
		"1111101" when "0110",
		"0000111" when "0111",
		"1111111" when "1000",
		"1100111" when "1001",
		"1110111" when "1010",
		"1111100" when "1011",
		"1011000" when "1100",
		"1011110" when "1101",
		"1111001" when "1110",
		"1110001" when "1111";

end architecture hardware;