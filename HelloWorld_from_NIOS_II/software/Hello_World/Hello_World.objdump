
Hello_World.elf:     file format elf32-littlenios2
Hello_World.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010140

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001c2c memsz 0x00001c2c flags r-x
    LOAD off    0x00002c4c vaddr 0x00011c4c paddr 0x00011c60 align 2**12
         filesz 0x00000014 memsz 0x00000014 flags rw-
    LOAD off    0x00002c74 vaddr 0x00011c74 paddr 0x00011c74 align 2**12
         filesz 0x00000000 memsz 0x0000013c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000120  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000019d8  00010140  00010140  00001140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000134  00011b18  00011b18  00002b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000014  00011c4c  00011c60  00002c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000013c  00011c74  00011c74  00002c74  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000418  00000000  00000000  00002c88  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000059b  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003ac7  00000000  00000000  0000363b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e75  00000000  00000000  00007102  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003f06  00000000  00000000  00008f77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000568  00000000  00000000  0000ce80  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000bcc  00000000  00000000  0000d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000128f  00000000  00000000  0000dfb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000f244  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000250  00000000  00000000  0000f258  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00010985  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00010988  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00010992  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00010993  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00010994  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0001099d  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000109a6  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000109af  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000022  00000000  00000000  000109ba  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00037d8b  00000000  00000000  000109dc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010140 l    d  .text	00000000 .text
00011b18 l    d  .rodata	00000000 .rodata
00011c4c l    d  .rwdata	00000000 .rwdata
00011c74 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00010178 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00011c78 l     O .bss	00000001 dado.1678
00011c77 l     O .bss	00000001 key1.1679
00011c76 l     O .bss	00000001 key2.1681
00011c75 l     O .bss	00000001 key3.1683
00011c74 l     O .bss	00000001 key4.1685
00011c4f l     O .rwdata	00000001 m_key1.1680
00011c4e l     O .rwdata	00000001 m_key2.1682
00011c4d l     O .rwdata	00000001 m_key3.1684
00011c4c l     O .rwdata	00000001 m_key4.1686
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000103dc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_load.c
00011718 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000119a4 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
000117a4 g     F .text	0000002c alt_main
00011cb0 g     O .bss	00000100 alt_irq
00011c60 g       *ABS*	00000000 __flash_rwdata_start
00011c98 g     O .bss	00000018 cont_f1
000117d0 g     F .text	00000038 alt_putstr
00011c58 g     O .rwdata	00000004 jtag_uart
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00011c84 g     O .bss	00000004 alt_argv
00019c4c g       *ABS*	00000000 _gp
0001017c g     F .text	00000004 loop
00010338 g     F .text	000000a4 __fixunsdfsi
0001028c g     F .text	0000001c f1_interrupt
00011450 g     F .text	00000138 __unpack_d
0001086c g     F .text	00000074 __adddf3
00011db0 g       *ABS*	00000000 __bss_end
00011a84 g     F .text	0000006c alt_iic_isr_register
0001183c g     F .text	000000ac alt_tick
00010e04 g     F .text	00000194 __floatunsidf
000119e8 g     F .text	00000018 alt_ic_irq_enabled
00011808 g     F .text	00000034 alt_alarm_stop
00011c94 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	00000054 alt_irq_handler
000119e0 g     F .text	00000004 alt_dcache_flush_all
00010d2c g     F .text	000000d8 __fixdfsi
00011c60 g       *ABS*	00000000 __ram_rwdata_end
00011c4c g       *ABS*	00000000 __ram_rodata_end
00011db0 g       *ABS*	00000000 end
00012300 g       *ABS*	00000000 __alt_stack_pointer
00011954 g     F .text	00000050 alt_avalon_timer_sc_init
000110bc g     F .text	00000080 __clzsi2
00011920 g     F .text	00000034 altera_avalon_jtag_uart_write
00010140 g     F .text	0000003c _start
00011c8c g     O .bss	00000004 _alt_tick_rate
00011c90 g     O .bss	00000004 _alt_nticks
000118e8 g     F .text	00000018 alt_sys_init
00011c7c g     O .bss	00000004 max_f1
00011650 g     F .text	00000038 __mulsi3
00011c4c g       *ABS*	00000000 __ram_rwdata_start
00011b18 g       *ABS*	00000000 __ram_rodata_start
00011588 g     F .text	000000c8 __fpcmp_parts_d
00011db0 g       *ABS*	00000000 __alt_stack_base
000108e0 g     F .text	000003c4 __muldf3
00010180 g     F .text	0000010c f_timer1
00011c74 g       *ABS*	00000000 __bss_start
00010328 g     F .text	00000010 main
00011c88 g     O .bss	00000004 alt_envp
00011b38 g     O .rodata	00000014 __thenan_df
00011b18 g       *ABS*	00000000 __flash_rodata_start
00011900 g     F .text	00000020 alt_irq_init
00011b4c g     O .rodata	00000100 __clz_tab
00011c80 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
000102a8 g     F .text	00000080 setup
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00011a80 g     F .text	00000004 alt_ic_isr_register
00011c60 g       *ABS*	00000000 _edata
00011db0 g       *ABS*	00000000 _end
00010140 g       *ABS*	00000000 __ram_exceptions_end
00011a40 g     F .text	00000040 alt_ic_irq_disable
00011af0 g     F .text	00000008 altera_nios2_qsys_irq_init
0001000c g       .entry	00000000 exit
00012300 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001000c g       .entry	00000000 _exit
00011688 g     F .text	00000090 alt_alarm_start
00010f98 g     F .text	00000124 __muldi3
00011af8 g     F .text	00000020 strlen
00010ca4 g     F .text	00000088 __gedf2
000119e4 g     F .text	00000004 alt_icache_flush_all
00011c5c g     O .rwdata	00000004 alt_priority_mask
00011a00 g     F .text	00000040 alt_ic_irq_enable
000107ec g     F .text	00000080 __subdf3
00011c50 g     O .rwdata	00000008 alt_alarm_list
00011738 g     F .text	0000006c alt_load
0001113c g     F .text	00000314 __pack_d



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08405014 	ori	at,at,320
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   10044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	deffff04 	addi	sp,sp,-4
   100f0:	dfc00015 	stw	ra,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   100f4:	0009313a 	rdctl	r4,ipending
   100f8:	00c00044 	movi	r3,1
   100fc:	01400074 	movhi	r5,1
   10100:	29472c04 	addi	r5,r5,7344
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10104:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10108:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1010c:	10000726 	beq	r2,zero,1012c <alt_irq_handler+0x40>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   10110:	29000117 	ldw	r4,4(r5)
   10114:	28800017 	ldw	r2,0(r5)
   10118:	103ee83a 	callr	r2
   1011c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   10120:	10000426 	beq	r2,zero,10134 <alt_irq_handler+0x48>
   10124:	1009883a 	mov	r4,r2
   10128:	003ff306 	br	100f8 <alt_irq_handler+0xc>
   1012c:	29400204 	addi	r5,r5,8
   10130:	003ff406 	br	10104 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10134:	dfc00017 	ldw	ra,0(sp)
   10138:	dec00104 	addi	sp,sp,4
   1013c:	f800283a 	ret

Disassembly of section .text:

00010140 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10140:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10144:	dec8c014 	ori	sp,sp,8960

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   10148:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1014c:	d6a71314 	ori	gp,gp,40012
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10150:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10154:	10871d14 	ori	r2,r2,7284

    movhi r3, %hi(__bss_end)
   10158:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1015c:	18c76c14 	ori	r3,r3,7600

    beq r2, r3, 1f
   10160:	10c00326 	beq	r2,r3,10170 <_start+0x30>

0:
    stw zero, (r2)
   10164:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10168:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1016c:	10fffd36 	bltu	r2,r3,10164 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10170:	00117380 	call	11738 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10174:	00117a40 	call	117a4 <alt_main>

00010178 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10178:	003fff06 	br	10178 <alt_after_alt_main>

0001017c <loop>:
	alt_alarm_start(&cont_f1, max_f1, f1_interrupt, "NULL");
}

void loop(void)
{
}
   1017c:	f800283a 	ret

00010180 <f_timer1>:

void f_timer1(void)
{
	static alt_u8 dado = 0, key1, m_key1 = 1, key2 = 0, m_key2 = 1, key3 = 0, m_key3 = 1, key4 = 0, m_key4 = 1;;

	dado = PORT(KEY_BASE);
   10180:	008000b4 	movhi	r2,2
   10184:	10841804 	addi	r2,r2,4192
   10188:	10c00037 	ldwio	r3,0(r2)

	if(dado & 1)
   1018c:	19003fcc 	andi	r4,r3,255
   10190:	2080004c 	andi	r2,r4,1
   10194:	1005003a 	cmpeq	r2,r2,zero

void f_timer1(void)
{
	static alt_u8 dado = 0, key1, m_key1 = 1, key2 = 0, m_key2 = 1, key3 = 0, m_key3 = 1, key4 = 0, m_key4 = 1;;

	dado = PORT(KEY_BASE);
   10198:	d0e00b05 	stb	r3,-32724(gp)

	if(dado & 1)
   1019c:	1000031e 	bne	r2,zero,101ac <f_timer1+0x2c>
	{
		key1 = 1;
   101a0:	00800044 	movi	r2,1
   101a4:	d0a00ac5 	stb	r2,-32725(gp)
   101a8:	00000106 	br	101b0 <f_timer1+0x30>
	}

	else
	{
		key1 = 0;
   101ac:	d0200ac5 	stb	zero,-32725(gp)
	}

	if(dado & 2)
   101b0:	2080008c 	andi	r2,r4,2
   101b4:	10000326 	beq	r2,zero,101c4 <f_timer1+0x44>
	{
		key2 = 1;
   101b8:	00800044 	movi	r2,1
   101bc:	d0a00a85 	stb	r2,-32726(gp)
   101c0:	00000106 	br	101c8 <f_timer1+0x48>
	}

	else
	{
		key2 = 0;
   101c4:	d0200a85 	stb	zero,-32726(gp)
	}

	if(dado & 4)
   101c8:	2080010c 	andi	r2,r4,4
   101cc:	10000326 	beq	r2,zero,101dc <f_timer1+0x5c>
	{
		key3 = 1;
   101d0:	00800044 	movi	r2,1
   101d4:	d0a00a45 	stb	r2,-32727(gp)
   101d8:	00000106 	br	101e0 <f_timer1+0x60>
	}

	else
	{
		key3 = 0;
   101dc:	d0200a45 	stb	zero,-32727(gp)
	}

	if(dado & 8)
   101e0:	2080020c 	andi	r2,r4,8
   101e4:	10000326 	beq	r2,zero,101f4 <f_timer1+0x74>
	{
		key4 = 1;
   101e8:	00800044 	movi	r2,1
   101ec:	d0a00a05 	stb	r2,-32728(gp)
   101f0:	00000106 	br	101f8 <f_timer1+0x78>
	}

	else
	{
		key4 = 0;
   101f4:	d0200a05 	stb	zero,-32728(gp)
	}

	if(key1 < m_key1)
   101f8:	d0e00ac3 	ldbu	r3,-32725(gp)
   101fc:	d0a000c3 	ldbu	r2,-32765(gp)
   10200:	1880042e 	bgeu	r3,r2,10214 <f_timer1+0x94>
	{
		LAT(LED_YELLOW_BASE, (1<<0));
   10204:	00c00044 	movi	r3,1
   10208:	008000b4 	movhi	r2,2
   1020c:	10841c04 	addi	r2,r2,4208
   10210:	10c00035 	stwio	r3,0(r2)
	}

	if(key2 < m_key2)
   10214:	d0e00a83 	ldbu	r3,-32726(gp)
   10218:	d0a00083 	ldbu	r2,-32766(gp)
   1021c:	1880042e 	bgeu	r3,r2,10230 <f_timer1+0xb0>
	{
		LAT(LED_YELLOW_BASE, (1<<1));
   10220:	00c00084 	movi	r3,2
   10224:	008000b4 	movhi	r2,2
   10228:	10841c04 	addi	r2,r2,4208
   1022c:	10c00035 	stwio	r3,0(r2)
	}

	if(key3 < m_key3)
   10230:	d0e00a43 	ldbu	r3,-32727(gp)
   10234:	d0a00043 	ldbu	r2,-32767(gp)
   10238:	1880042e 	bgeu	r3,r2,1024c <f_timer1+0xcc>
	{
		LAT(LED_YELLOW_BASE, (1<<2));
   1023c:	00c00104 	movi	r3,4
   10240:	008000b4 	movhi	r2,2
   10244:	10841c04 	addi	r2,r2,4208
   10248:	10c00035 	stwio	r3,0(r2)
	}

	if(key4 < m_key4)
   1024c:	d0e00a03 	ldbu	r3,-32728(gp)
   10250:	d0a00003 	ldbu	r2,-32768(gp)
   10254:	1880042e 	bgeu	r3,r2,10268 <f_timer1+0xe8>
	{
		LAT(LED_YELLOW_BASE, (1<<3));
   10258:	00c00204 	movi	r3,8
   1025c:	008000b4 	movhi	r2,2
   10260:	10841c04 	addi	r2,r2,4208
   10264:	10c00035 	stwio	r3,0(r2)
	}

	m_key1 = key1;
   10268:	d0a00ac3 	ldbu	r2,-32725(gp)
   1026c:	d0a000c5 	stb	r2,-32765(gp)
	m_key2 = key2;
   10270:	d0a00a83 	ldbu	r2,-32726(gp)
   10274:	d0a00085 	stb	r2,-32766(gp)
	m_key3 = key3;
   10278:	d0a00a43 	ldbu	r2,-32727(gp)
   1027c:	d0a00045 	stb	r2,-32767(gp)
	m_key4 = key4;
   10280:	d0a00a03 	ldbu	r2,-32728(gp)
   10284:	d0a00005 	stb	r2,-32768(gp)
}
   10288:	f800283a 	ret

0001028c <f1_interrupt>:
//f_timer1

alt_u32 max_f1;
alt_alarm cont_f1;

alt_u32 f1_interrupt(void* context) {
   1028c:	deffff04 	addi	sp,sp,-4
   10290:	dfc00015 	stw	ra,0(sp)

	f_timer1();
   10294:	00101800 	call	10180 <f_timer1>

	return max_f1;
}
   10298:	d0a00c17 	ldw	r2,-32720(gp)
   1029c:	dfc00017 	ldw	ra,0(sp)
   102a0:	dec00104 	addi	sp,sp,4
   102a4:	f800283a 	ret

000102a8 <setup>:

	return 0;
}

void setup(void)
{
   102a8:	deffff04 	addi	sp,sp,-4
	alt_putstr("Hello from Nios II!\n");
   102ac:	01000074 	movhi	r4,1
   102b0:	2106c604 	addi	r4,r4,6936

	return 0;
}

void setup(void)
{
   102b4:	dfc00015 	stw	ra,0(sp)
	alt_putstr("Hello from Nios II!\n");
   102b8:	00117d00 	call	117d0 <alt_putstr>
	max_f1 = alt_ticks_per_second() * 0.001; //10ms
   102bc:	00800074 	movhi	r2,1
   102c0:	10872304 	addi	r2,r2,7308
   102c4:	11000017 	ldw	r4,0(r2)
   102c8:	0010e040 	call	10e04 <__floatunsidf>
   102cc:	0234bcb4 	movhi	r8,54002
   102d0:	422a7f04 	addi	r8,r8,-22020
   102d4:	024fd434 	movhi	r9,16208
   102d8:	4a589344 	addi	r9,r9,25165
   102dc:	480f883a 	mov	r7,r9
   102e0:	400d883a 	mov	r6,r8
   102e4:	180b883a 	mov	r5,r3
   102e8:	1009883a 	mov	r4,r2
   102ec:	00108e00 	call	108e0 <__muldf3>
   102f0:	180b883a 	mov	r5,r3
   102f4:	1009883a 	mov	r4,r2
   102f8:	00103380 	call	10338 <__fixunsdfsi>
	alt_alarm_start(&cont_f1, max_f1, f1_interrupt, "NULL");
   102fc:	100b883a 	mov	r5,r2
   10300:	01000074 	movhi	r4,1
   10304:	21072604 	addi	r4,r4,7320
   10308:	01800074 	movhi	r6,1
   1030c:	3180a304 	addi	r6,r6,652
   10310:	01c00074 	movhi	r7,1
   10314:	39c6cc04 	addi	r7,r7,6960
}

void setup(void)
{
	alt_putstr("Hello from Nios II!\n");
	max_f1 = alt_ticks_per_second() * 0.001; //10ms
   10318:	d0a00c15 	stw	r2,-32720(gp)
	alt_alarm_start(&cont_f1, max_f1, f1_interrupt, "NULL");
}
   1031c:	dfc00017 	ldw	ra,0(sp)
   10320:	dec00104 	addi	sp,sp,4

void setup(void)
{
	alt_putstr("Hello from Nios II!\n");
	max_f1 = alt_ticks_per_second() * 0.001; //10ms
	alt_alarm_start(&cont_f1, max_f1, f1_interrupt, "NULL");
   10324:	00116881 	jmpi	11688 <alt_alarm_start>

00010328 <main>:

	return max_f1;
}

int main()
{ 
   10328:	deffff04 	addi	sp,sp,-4
   1032c:	dfc00015 	stw	ra,0(sp)
	setup();
   10330:	00102a80 	call	102a8 <setup>
   10334:	003fff06 	br	10334 <main+0xc>

00010338 <__fixunsdfsi>:
   10338:	defffb04 	addi	sp,sp,-20
   1033c:	dc400115 	stw	r17,4(sp)
   10340:	dc000015 	stw	r16,0(sp)
   10344:	04507834 	movhi	r17,16864
   10348:	0021883a 	mov	r16,zero
   1034c:	800d883a 	mov	r6,r16
   10350:	880f883a 	mov	r7,r17
   10354:	dcc00315 	stw	r19,12(sp)
   10358:	dc800215 	stw	r18,8(sp)
   1035c:	2827883a 	mov	r19,r5
   10360:	2025883a 	mov	r18,r4
   10364:	dfc00415 	stw	ra,16(sp)
   10368:	0010ca40 	call	10ca4 <__gedf2>
   1036c:	000d883a 	mov	r6,zero
   10370:	880f883a 	mov	r7,r17
   10374:	980b883a 	mov	r5,r19
   10378:	9009883a 	mov	r4,r18
   1037c:	10000d16 	blt	r2,zero,103b4 <__fixunsdfsi+0x7c>
   10380:	00107ec0 	call	107ec <__subdf3>
   10384:	180b883a 	mov	r5,r3
   10388:	1009883a 	mov	r4,r2
   1038c:	0010d2c0 	call	10d2c <__fixdfsi>
   10390:	00e00034 	movhi	r3,32768
   10394:	10c5883a 	add	r2,r2,r3
   10398:	dfc00417 	ldw	ra,16(sp)
   1039c:	dcc00317 	ldw	r19,12(sp)
   103a0:	dc800217 	ldw	r18,8(sp)
   103a4:	dc400117 	ldw	r17,4(sp)
   103a8:	dc000017 	ldw	r16,0(sp)
   103ac:	dec00504 	addi	sp,sp,20
   103b0:	f800283a 	ret
   103b4:	980b883a 	mov	r5,r19
   103b8:	9009883a 	mov	r4,r18
   103bc:	0010d2c0 	call	10d2c <__fixdfsi>
   103c0:	dfc00417 	ldw	ra,16(sp)
   103c4:	dcc00317 	ldw	r19,12(sp)
   103c8:	dc800217 	ldw	r18,8(sp)
   103cc:	dc400117 	ldw	r17,4(sp)
   103d0:	dc000017 	ldw	r16,0(sp)
   103d4:	dec00504 	addi	sp,sp,20
   103d8:	f800283a 	ret

000103dc <_fpadd_parts>:
   103dc:	defff804 	addi	sp,sp,-32
   103e0:	dcc00315 	stw	r19,12(sp)
   103e4:	2027883a 	mov	r19,r4
   103e8:	21000017 	ldw	r4,0(r4)
   103ec:	00c00044 	movi	r3,1
   103f0:	dd400515 	stw	r21,20(sp)
   103f4:	dd000415 	stw	r20,16(sp)
   103f8:	ddc00715 	stw	r23,28(sp)
   103fc:	dd800615 	stw	r22,24(sp)
   10400:	dc800215 	stw	r18,8(sp)
   10404:	dc400115 	stw	r17,4(sp)
   10408:	dc000015 	stw	r16,0(sp)
   1040c:	282b883a 	mov	r21,r5
   10410:	3029883a 	mov	r20,r6
   10414:	1900632e 	bgeu	r3,r4,105a4 <_fpadd_parts+0x1c8>
   10418:	28800017 	ldw	r2,0(r5)
   1041c:	1880812e 	bgeu	r3,r2,10624 <_fpadd_parts+0x248>
   10420:	00c00104 	movi	r3,4
   10424:	20c0dc26 	beq	r4,r3,10798 <_fpadd_parts+0x3bc>
   10428:	10c07e26 	beq	r2,r3,10624 <_fpadd_parts+0x248>
   1042c:	00c00084 	movi	r3,2
   10430:	10c06726 	beq	r2,r3,105d0 <_fpadd_parts+0x1f4>
   10434:	20c07b26 	beq	r4,r3,10624 <_fpadd_parts+0x248>
   10438:	9dc00217 	ldw	r23,8(r19)
   1043c:	28c00217 	ldw	r3,8(r5)
   10440:	9c400317 	ldw	r17,12(r19)
   10444:	2bc00317 	ldw	r15,12(r5)
   10448:	b8cdc83a 	sub	r6,r23,r3
   1044c:	9c800417 	ldw	r18,16(r19)
   10450:	2c000417 	ldw	r16,16(r5)
   10454:	3009883a 	mov	r4,r6
   10458:	30009716 	blt	r6,zero,106b8 <_fpadd_parts+0x2dc>
   1045c:	00800fc4 	movi	r2,63
   10460:	11806b16 	blt	r2,r6,10610 <_fpadd_parts+0x234>
   10464:	0100a40e 	bge	zero,r4,106f8 <_fpadd_parts+0x31c>
   10468:	35bff804 	addi	r22,r6,-32
   1046c:	b000bc16 	blt	r22,zero,10760 <_fpadd_parts+0x384>
   10470:	8596d83a 	srl	r11,r16,r22
   10474:	0019883a 	mov	r12,zero
   10478:	0013883a 	mov	r9,zero
   1047c:	01000044 	movi	r4,1
   10480:	0015883a 	mov	r10,zero
   10484:	b000be16 	blt	r22,zero,10780 <_fpadd_parts+0x3a4>
   10488:	2590983a 	sll	r8,r4,r22
   1048c:	000f883a 	mov	r7,zero
   10490:	00bfffc4 	movi	r2,-1
   10494:	3889883a 	add	r4,r7,r2
   10498:	408b883a 	add	r5,r8,r2
   1049c:	21cd803a 	cmpltu	r6,r4,r7
   104a0:	314b883a 	add	r5,r6,r5
   104a4:	7904703a 	and	r2,r15,r4
   104a8:	8146703a 	and	r3,r16,r5
   104ac:	10c4b03a 	or	r2,r2,r3
   104b0:	10000226 	beq	r2,zero,104bc <_fpadd_parts+0xe0>
   104b4:	02400044 	movi	r9,1
   104b8:	0015883a 	mov	r10,zero
   104bc:	5a5eb03a 	or	r15,r11,r9
   104c0:	62a0b03a 	or	r16,r12,r10
   104c4:	99400117 	ldw	r5,4(r19)
   104c8:	a8800117 	ldw	r2,4(r21)
   104cc:	28806e26 	beq	r5,r2,10688 <_fpadd_parts+0x2ac>
   104d0:	28006626 	beq	r5,zero,1066c <_fpadd_parts+0x290>
   104d4:	7c45c83a 	sub	r2,r15,r17
   104d8:	7889803a 	cmpltu	r4,r15,r2
   104dc:	8487c83a 	sub	r3,r16,r18
   104e0:	1909c83a 	sub	r4,r3,r4
   104e4:	100d883a 	mov	r6,r2
   104e8:	200f883a 	mov	r7,r4
   104ec:	38007716 	blt	r7,zero,106cc <_fpadd_parts+0x2f0>
   104f0:	a5c00215 	stw	r23,8(r20)
   104f4:	a1c00415 	stw	r7,16(r20)
   104f8:	a0000115 	stw	zero,4(r20)
   104fc:	a1800315 	stw	r6,12(r20)
   10500:	a2000317 	ldw	r8,12(r20)
   10504:	a2400417 	ldw	r9,16(r20)
   10508:	00bfffc4 	movi	r2,-1
   1050c:	408b883a 	add	r5,r8,r2
   10510:	2a09803a 	cmpltu	r4,r5,r8
   10514:	488d883a 	add	r6,r9,r2
   10518:	01c40034 	movhi	r7,4096
   1051c:	39ffffc4 	addi	r7,r7,-1
   10520:	218d883a 	add	r6,r4,r6
   10524:	39801736 	bltu	r7,r6,10584 <_fpadd_parts+0x1a8>
   10528:	31c06526 	beq	r6,r7,106c0 <_fpadd_parts+0x2e4>
   1052c:	a3000217 	ldw	r12,8(r20)
   10530:	4209883a 	add	r4,r8,r8
   10534:	00bfffc4 	movi	r2,-1
   10538:	220f803a 	cmpltu	r7,r4,r8
   1053c:	4a4b883a 	add	r5,r9,r9
   10540:	394f883a 	add	r7,r7,r5
   10544:	2095883a 	add	r10,r4,r2
   10548:	3897883a 	add	r11,r7,r2
   1054c:	510d803a 	cmpltu	r6,r10,r4
   10550:	6099883a 	add	r12,r12,r2
   10554:	32d7883a 	add	r11,r6,r11
   10558:	00840034 	movhi	r2,4096
   1055c:	10bfffc4 	addi	r2,r2,-1
   10560:	2011883a 	mov	r8,r4
   10564:	3813883a 	mov	r9,r7
   10568:	a1000315 	stw	r4,12(r20)
   1056c:	a1c00415 	stw	r7,16(r20)
   10570:	a3000215 	stw	r12,8(r20)
   10574:	12c00336 	bltu	r2,r11,10584 <_fpadd_parts+0x1a8>
   10578:	58bfed1e 	bne	r11,r2,10530 <_fpadd_parts+0x154>
   1057c:	00bfff84 	movi	r2,-2
   10580:	12bfeb2e 	bgeu	r2,r10,10530 <_fpadd_parts+0x154>
   10584:	a2800417 	ldw	r10,16(r20)
   10588:	008000c4 	movi	r2,3
   1058c:	00c80034 	movhi	r3,8192
   10590:	18ffffc4 	addi	r3,r3,-1
   10594:	a2400317 	ldw	r9,12(r20)
   10598:	a0800015 	stw	r2,0(r20)
   1059c:	1a802336 	bltu	r3,r10,1062c <_fpadd_parts+0x250>
   105a0:	a027883a 	mov	r19,r20
   105a4:	9805883a 	mov	r2,r19
   105a8:	ddc00717 	ldw	r23,28(sp)
   105ac:	dd800617 	ldw	r22,24(sp)
   105b0:	dd400517 	ldw	r21,20(sp)
   105b4:	dd000417 	ldw	r20,16(sp)
   105b8:	dcc00317 	ldw	r19,12(sp)
   105bc:	dc800217 	ldw	r18,8(sp)
   105c0:	dc400117 	ldw	r17,4(sp)
   105c4:	dc000017 	ldw	r16,0(sp)
   105c8:	dec00804 	addi	sp,sp,32
   105cc:	f800283a 	ret
   105d0:	20fff41e 	bne	r4,r3,105a4 <_fpadd_parts+0x1c8>
   105d4:	31000015 	stw	r4,0(r6)
   105d8:	98800117 	ldw	r2,4(r19)
   105dc:	30800115 	stw	r2,4(r6)
   105e0:	98c00217 	ldw	r3,8(r19)
   105e4:	30c00215 	stw	r3,8(r6)
   105e8:	98800317 	ldw	r2,12(r19)
   105ec:	30800315 	stw	r2,12(r6)
   105f0:	98c00417 	ldw	r3,16(r19)
   105f4:	30c00415 	stw	r3,16(r6)
   105f8:	98800117 	ldw	r2,4(r19)
   105fc:	28c00117 	ldw	r3,4(r5)
   10600:	3027883a 	mov	r19,r6
   10604:	10c4703a 	and	r2,r2,r3
   10608:	30800115 	stw	r2,4(r6)
   1060c:	003fe506 	br	105a4 <_fpadd_parts+0x1c8>
   10610:	1dc02616 	blt	r3,r23,106ac <_fpadd_parts+0x2d0>
   10614:	0023883a 	mov	r17,zero
   10618:	182f883a 	mov	r23,r3
   1061c:	0025883a 	mov	r18,zero
   10620:	003fa806 	br	104c4 <_fpadd_parts+0xe8>
   10624:	a827883a 	mov	r19,r21
   10628:	003fde06 	br	105a4 <_fpadd_parts+0x1c8>
   1062c:	01800044 	movi	r6,1
   10630:	500497fa 	slli	r2,r10,31
   10634:	4808d07a 	srli	r4,r9,1
   10638:	518ad83a 	srl	r5,r10,r6
   1063c:	a2000217 	ldw	r8,8(r20)
   10640:	1108b03a 	or	r4,r2,r4
   10644:	0007883a 	mov	r3,zero
   10648:	4984703a 	and	r2,r9,r6
   1064c:	208cb03a 	or	r6,r4,r2
   10650:	28ceb03a 	or	r7,r5,r3
   10654:	42000044 	addi	r8,r8,1
   10658:	a027883a 	mov	r19,r20
   1065c:	a1c00415 	stw	r7,16(r20)
   10660:	a2000215 	stw	r8,8(r20)
   10664:	a1800315 	stw	r6,12(r20)
   10668:	003fce06 	br	105a4 <_fpadd_parts+0x1c8>
   1066c:	8bc5c83a 	sub	r2,r17,r15
   10670:	8889803a 	cmpltu	r4,r17,r2
   10674:	9407c83a 	sub	r3,r18,r16
   10678:	1909c83a 	sub	r4,r3,r4
   1067c:	100d883a 	mov	r6,r2
   10680:	200f883a 	mov	r7,r4
   10684:	003f9906 	br	104ec <_fpadd_parts+0x110>
   10688:	7c45883a 	add	r2,r15,r17
   1068c:	13c9803a 	cmpltu	r4,r2,r15
   10690:	8487883a 	add	r3,r16,r18
   10694:	20c9883a 	add	r4,r4,r3
   10698:	a1400115 	stw	r5,4(r20)
   1069c:	a5c00215 	stw	r23,8(r20)
   106a0:	a0800315 	stw	r2,12(r20)
   106a4:	a1000415 	stw	r4,16(r20)
   106a8:	003fb606 	br	10584 <_fpadd_parts+0x1a8>
   106ac:	001f883a 	mov	r15,zero
   106b0:	0021883a 	mov	r16,zero
   106b4:	003f8306 	br	104c4 <_fpadd_parts+0xe8>
   106b8:	018dc83a 	sub	r6,zero,r6
   106bc:	003f6706 	br	1045c <_fpadd_parts+0x80>
   106c0:	00bfff84 	movi	r2,-2
   106c4:	117faf36 	bltu	r2,r5,10584 <_fpadd_parts+0x1a8>
   106c8:	003f9806 	br	1052c <_fpadd_parts+0x150>
   106cc:	0005883a 	mov	r2,zero
   106d0:	1189c83a 	sub	r4,r2,r6
   106d4:	1105803a 	cmpltu	r2,r2,r4
   106d8:	01cbc83a 	sub	r5,zero,r7
   106dc:	2885c83a 	sub	r2,r5,r2
   106e0:	01800044 	movi	r6,1
   106e4:	a1800115 	stw	r6,4(r20)
   106e8:	a5c00215 	stw	r23,8(r20)
   106ec:	a1000315 	stw	r4,12(r20)
   106f0:	a0800415 	stw	r2,16(r20)
   106f4:	003f8206 	br	10500 <_fpadd_parts+0x124>
   106f8:	203f7226 	beq	r4,zero,104c4 <_fpadd_parts+0xe8>
   106fc:	35bff804 	addi	r22,r6,-32
   10700:	b9af883a 	add	r23,r23,r6
   10704:	b0003116 	blt	r22,zero,107cc <_fpadd_parts+0x3f0>
   10708:	959ad83a 	srl	r13,r18,r22
   1070c:	001d883a 	mov	r14,zero
   10710:	000f883a 	mov	r7,zero
   10714:	01000044 	movi	r4,1
   10718:	0011883a 	mov	r8,zero
   1071c:	b0002516 	blt	r22,zero,107b4 <_fpadd_parts+0x3d8>
   10720:	2594983a 	sll	r10,r4,r22
   10724:	0013883a 	mov	r9,zero
   10728:	00bfffc4 	movi	r2,-1
   1072c:	4889883a 	add	r4,r9,r2
   10730:	508b883a 	add	r5,r10,r2
   10734:	224d803a 	cmpltu	r6,r4,r9
   10738:	314b883a 	add	r5,r6,r5
   1073c:	8904703a 	and	r2,r17,r4
   10740:	9146703a 	and	r3,r18,r5
   10744:	10c4b03a 	or	r2,r2,r3
   10748:	10000226 	beq	r2,zero,10754 <_fpadd_parts+0x378>
   1074c:	01c00044 	movi	r7,1
   10750:	0011883a 	mov	r8,zero
   10754:	69e2b03a 	or	r17,r13,r7
   10758:	7224b03a 	or	r18,r14,r8
   1075c:	003f5906 	br	104c4 <_fpadd_parts+0xe8>
   10760:	8407883a 	add	r3,r16,r16
   10764:	008007c4 	movi	r2,31
   10768:	1185c83a 	sub	r2,r2,r6
   1076c:	1886983a 	sll	r3,r3,r2
   10770:	7996d83a 	srl	r11,r15,r6
   10774:	8198d83a 	srl	r12,r16,r6
   10778:	1ad6b03a 	or	r11,r3,r11
   1077c:	003f3e06 	br	10478 <_fpadd_parts+0x9c>
   10780:	2006d07a 	srli	r3,r4,1
   10784:	008007c4 	movi	r2,31
   10788:	1185c83a 	sub	r2,r2,r6
   1078c:	1890d83a 	srl	r8,r3,r2
   10790:	218e983a 	sll	r7,r4,r6
   10794:	003f3e06 	br	10490 <_fpadd_parts+0xb4>
   10798:	113f821e 	bne	r2,r4,105a4 <_fpadd_parts+0x1c8>
   1079c:	28c00117 	ldw	r3,4(r5)
   107a0:	98800117 	ldw	r2,4(r19)
   107a4:	10ff7f26 	beq	r2,r3,105a4 <_fpadd_parts+0x1c8>
   107a8:	04c00074 	movhi	r19,1
   107ac:	9cc6ce04 	addi	r19,r19,6968
   107b0:	003f7c06 	br	105a4 <_fpadd_parts+0x1c8>
   107b4:	2006d07a 	srli	r3,r4,1
   107b8:	008007c4 	movi	r2,31
   107bc:	1185c83a 	sub	r2,r2,r6
   107c0:	1894d83a 	srl	r10,r3,r2
   107c4:	2192983a 	sll	r9,r4,r6
   107c8:	003fd706 	br	10728 <_fpadd_parts+0x34c>
   107cc:	9487883a 	add	r3,r18,r18
   107d0:	008007c4 	movi	r2,31
   107d4:	1185c83a 	sub	r2,r2,r6
   107d8:	1886983a 	sll	r3,r3,r2
   107dc:	899ad83a 	srl	r13,r17,r6
   107e0:	919cd83a 	srl	r14,r18,r6
   107e4:	1b5ab03a 	or	r13,r3,r13
   107e8:	003fc906 	br	10710 <_fpadd_parts+0x334>

000107ec <__subdf3>:
   107ec:	deffea04 	addi	sp,sp,-88
   107f0:	dcc01415 	stw	r19,80(sp)
   107f4:	dcc00404 	addi	r19,sp,16
   107f8:	2011883a 	mov	r8,r4
   107fc:	2813883a 	mov	r9,r5
   10800:	dc401315 	stw	r17,76(sp)
   10804:	d809883a 	mov	r4,sp
   10808:	980b883a 	mov	r5,r19
   1080c:	dc400904 	addi	r17,sp,36
   10810:	dfc01515 	stw	ra,84(sp)
   10814:	da400115 	stw	r9,4(sp)
   10818:	d9c00315 	stw	r7,12(sp)
   1081c:	da000015 	stw	r8,0(sp)
   10820:	d9800215 	stw	r6,8(sp)
   10824:	00114500 	call	11450 <__unpack_d>
   10828:	d9000204 	addi	r4,sp,8
   1082c:	880b883a 	mov	r5,r17
   10830:	00114500 	call	11450 <__unpack_d>
   10834:	d8800a17 	ldw	r2,40(sp)
   10838:	880b883a 	mov	r5,r17
   1083c:	9809883a 	mov	r4,r19
   10840:	d9800e04 	addi	r6,sp,56
   10844:	1080005c 	xori	r2,r2,1
   10848:	d8800a15 	stw	r2,40(sp)
   1084c:	00103dc0 	call	103dc <_fpadd_parts>
   10850:	1009883a 	mov	r4,r2
   10854:	001113c0 	call	1113c <__pack_d>
   10858:	dfc01517 	ldw	ra,84(sp)
   1085c:	dcc01417 	ldw	r19,80(sp)
   10860:	dc401317 	ldw	r17,76(sp)
   10864:	dec01604 	addi	sp,sp,88
   10868:	f800283a 	ret

0001086c <__adddf3>:
   1086c:	deffea04 	addi	sp,sp,-88
   10870:	dcc01415 	stw	r19,80(sp)
   10874:	dcc00404 	addi	r19,sp,16
   10878:	2011883a 	mov	r8,r4
   1087c:	2813883a 	mov	r9,r5
   10880:	dc401315 	stw	r17,76(sp)
   10884:	d809883a 	mov	r4,sp
   10888:	980b883a 	mov	r5,r19
   1088c:	dc400904 	addi	r17,sp,36
   10890:	dfc01515 	stw	ra,84(sp)
   10894:	da400115 	stw	r9,4(sp)
   10898:	d9c00315 	stw	r7,12(sp)
   1089c:	da000015 	stw	r8,0(sp)
   108a0:	d9800215 	stw	r6,8(sp)
   108a4:	00114500 	call	11450 <__unpack_d>
   108a8:	d9000204 	addi	r4,sp,8
   108ac:	880b883a 	mov	r5,r17
   108b0:	00114500 	call	11450 <__unpack_d>
   108b4:	d9800e04 	addi	r6,sp,56
   108b8:	9809883a 	mov	r4,r19
   108bc:	880b883a 	mov	r5,r17
   108c0:	00103dc0 	call	103dc <_fpadd_parts>
   108c4:	1009883a 	mov	r4,r2
   108c8:	001113c0 	call	1113c <__pack_d>
   108cc:	dfc01517 	ldw	ra,84(sp)
   108d0:	dcc01417 	ldw	r19,80(sp)
   108d4:	dc401317 	ldw	r17,76(sp)
   108d8:	dec01604 	addi	sp,sp,88
   108dc:	f800283a 	ret

000108e0 <__muldf3>:
   108e0:	deffe004 	addi	sp,sp,-128
   108e4:	dc401815 	stw	r17,96(sp)
   108e8:	dc400404 	addi	r17,sp,16
   108ec:	2011883a 	mov	r8,r4
   108f0:	2813883a 	mov	r9,r5
   108f4:	dc001715 	stw	r16,92(sp)
   108f8:	d809883a 	mov	r4,sp
   108fc:	880b883a 	mov	r5,r17
   10900:	dc000904 	addi	r16,sp,36
   10904:	dfc01f15 	stw	ra,124(sp)
   10908:	da400115 	stw	r9,4(sp)
   1090c:	d9c00315 	stw	r7,12(sp)
   10910:	da000015 	stw	r8,0(sp)
   10914:	d9800215 	stw	r6,8(sp)
   10918:	ddc01e15 	stw	r23,120(sp)
   1091c:	dd801d15 	stw	r22,116(sp)
   10920:	dd401c15 	stw	r21,112(sp)
   10924:	dd001b15 	stw	r20,108(sp)
   10928:	dcc01a15 	stw	r19,104(sp)
   1092c:	dc801915 	stw	r18,100(sp)
   10930:	00114500 	call	11450 <__unpack_d>
   10934:	d9000204 	addi	r4,sp,8
   10938:	800b883a 	mov	r5,r16
   1093c:	00114500 	call	11450 <__unpack_d>
   10940:	d9000417 	ldw	r4,16(sp)
   10944:	00800044 	movi	r2,1
   10948:	1100102e 	bgeu	r2,r4,1098c <__muldf3+0xac>
   1094c:	d8c00917 	ldw	r3,36(sp)
   10950:	10c0062e 	bgeu	r2,r3,1096c <__muldf3+0x8c>
   10954:	00800104 	movi	r2,4
   10958:	20800a26 	beq	r4,r2,10984 <__muldf3+0xa4>
   1095c:	1880cc26 	beq	r3,r2,10c90 <__muldf3+0x3b0>
   10960:	00800084 	movi	r2,2
   10964:	20800926 	beq	r4,r2,1098c <__muldf3+0xac>
   10968:	1880191e 	bne	r3,r2,109d0 <__muldf3+0xf0>
   1096c:	d8c00a17 	ldw	r3,40(sp)
   10970:	d8800517 	ldw	r2,20(sp)
   10974:	8009883a 	mov	r4,r16
   10978:	10c4c03a 	cmpne	r2,r2,r3
   1097c:	d8800a15 	stw	r2,40(sp)
   10980:	00000706 	br	109a0 <__muldf3+0xc0>
   10984:	00800084 	movi	r2,2
   10988:	1880c326 	beq	r3,r2,10c98 <__muldf3+0x3b8>
   1098c:	d8800517 	ldw	r2,20(sp)
   10990:	d8c00a17 	ldw	r3,40(sp)
   10994:	8809883a 	mov	r4,r17
   10998:	10c4c03a 	cmpne	r2,r2,r3
   1099c:	d8800515 	stw	r2,20(sp)
   109a0:	001113c0 	call	1113c <__pack_d>
   109a4:	dfc01f17 	ldw	ra,124(sp)
   109a8:	ddc01e17 	ldw	r23,120(sp)
   109ac:	dd801d17 	ldw	r22,116(sp)
   109b0:	dd401c17 	ldw	r21,112(sp)
   109b4:	dd001b17 	ldw	r20,108(sp)
   109b8:	dcc01a17 	ldw	r19,104(sp)
   109bc:	dc801917 	ldw	r18,100(sp)
   109c0:	dc401817 	ldw	r17,96(sp)
   109c4:	dc001717 	ldw	r16,92(sp)
   109c8:	dec02004 	addi	sp,sp,128
   109cc:	f800283a 	ret
   109d0:	dd800717 	ldw	r22,28(sp)
   109d4:	dc800c17 	ldw	r18,48(sp)
   109d8:	002b883a 	mov	r21,zero
   109dc:	0023883a 	mov	r17,zero
   109e0:	a80b883a 	mov	r5,r21
   109e4:	b00d883a 	mov	r6,r22
   109e8:	880f883a 	mov	r7,r17
   109ec:	ddc00817 	ldw	r23,32(sp)
   109f0:	dcc00d17 	ldw	r19,52(sp)
   109f4:	9009883a 	mov	r4,r18
   109f8:	0010f980 	call	10f98 <__muldi3>
   109fc:	001b883a 	mov	r13,zero
   10a00:	680f883a 	mov	r7,r13
   10a04:	b009883a 	mov	r4,r22
   10a08:	000b883a 	mov	r5,zero
   10a0c:	980d883a 	mov	r6,r19
   10a10:	b82d883a 	mov	r22,r23
   10a14:	002f883a 	mov	r23,zero
   10a18:	db401615 	stw	r13,88(sp)
   10a1c:	d8801315 	stw	r2,76(sp)
   10a20:	d8c01415 	stw	r3,80(sp)
   10a24:	dcc01515 	stw	r19,84(sp)
   10a28:	0010f980 	call	10f98 <__muldi3>
   10a2c:	b00d883a 	mov	r6,r22
   10a30:	000b883a 	mov	r5,zero
   10a34:	9009883a 	mov	r4,r18
   10a38:	b80f883a 	mov	r7,r23
   10a3c:	1021883a 	mov	r16,r2
   10a40:	1823883a 	mov	r17,r3
   10a44:	0010f980 	call	10f98 <__muldi3>
   10a48:	8085883a 	add	r2,r16,r2
   10a4c:	140d803a 	cmpltu	r6,r2,r16
   10a50:	88c7883a 	add	r3,r17,r3
   10a54:	30cd883a 	add	r6,r6,r3
   10a58:	1029883a 	mov	r20,r2
   10a5c:	302b883a 	mov	r21,r6
   10a60:	da801317 	ldw	r10,76(sp)
   10a64:	dac01417 	ldw	r11,80(sp)
   10a68:	db001517 	ldw	r12,84(sp)
   10a6c:	db401617 	ldw	r13,88(sp)
   10a70:	3440612e 	bgeu	r6,r17,10bf8 <__muldf3+0x318>
   10a74:	0009883a 	mov	r4,zero
   10a78:	5105883a 	add	r2,r10,r4
   10a7c:	128d803a 	cmpltu	r6,r2,r10
   10a80:	5d07883a 	add	r3,r11,r20
   10a84:	30cd883a 	add	r6,r6,r3
   10a88:	0021883a 	mov	r16,zero
   10a8c:	04400044 	movi	r17,1
   10a90:	1025883a 	mov	r18,r2
   10a94:	3027883a 	mov	r19,r6
   10a98:	32c06236 	bltu	r6,r11,10c24 <__muldf3+0x344>
   10a9c:	59807a26 	beq	r11,r6,10c88 <__muldf3+0x3a8>
   10aa0:	680b883a 	mov	r5,r13
   10aa4:	b80f883a 	mov	r7,r23
   10aa8:	6009883a 	mov	r4,r12
   10aac:	b00d883a 	mov	r6,r22
   10ab0:	0010f980 	call	10f98 <__muldi3>
   10ab4:	1009883a 	mov	r4,r2
   10ab8:	000f883a 	mov	r7,zero
   10abc:	1545883a 	add	r2,r2,r21
   10ac0:	1111803a 	cmpltu	r8,r2,r4
   10ac4:	19c7883a 	add	r3,r3,r7
   10ac8:	40c7883a 	add	r3,r8,r3
   10acc:	88cb883a 	add	r5,r17,r3
   10ad0:	d8c00617 	ldw	r3,24(sp)
   10ad4:	8089883a 	add	r4,r16,r2
   10ad8:	d8800b17 	ldw	r2,44(sp)
   10adc:	18c00104 	addi	r3,r3,4
   10ae0:	240d803a 	cmpltu	r6,r4,r16
   10ae4:	10c7883a 	add	r3,r2,r3
   10ae8:	2013883a 	mov	r9,r4
   10aec:	d8800a17 	ldw	r2,40(sp)
   10af0:	d9000517 	ldw	r4,20(sp)
   10af4:	314d883a 	add	r6,r6,r5
   10af8:	3015883a 	mov	r10,r6
   10afc:	2088c03a 	cmpne	r4,r4,r2
   10b00:	00880034 	movhi	r2,8192
   10b04:	10bfffc4 	addi	r2,r2,-1
   10b08:	d9000f15 	stw	r4,60(sp)
   10b0c:	d8c01015 	stw	r3,64(sp)
   10b10:	1180162e 	bgeu	r2,r6,10b6c <__muldf3+0x28c>
   10b14:	1811883a 	mov	r8,r3
   10b18:	101f883a 	mov	r15,r2
   10b1c:	980497fa 	slli	r2,r19,31
   10b20:	9016d07a 	srli	r11,r18,1
   10b24:	500697fa 	slli	r3,r10,31
   10b28:	480cd07a 	srli	r6,r9,1
   10b2c:	500ed07a 	srli	r7,r10,1
   10b30:	12d6b03a 	or	r11,r2,r11
   10b34:	00800044 	movi	r2,1
   10b38:	198cb03a 	or	r6,r3,r6
   10b3c:	4888703a 	and	r4,r9,r2
   10b40:	9818d07a 	srli	r12,r19,1
   10b44:	001b883a 	mov	r13,zero
   10b48:	03a00034 	movhi	r14,32768
   10b4c:	3013883a 	mov	r9,r6
   10b50:	3815883a 	mov	r10,r7
   10b54:	4091883a 	add	r8,r8,r2
   10b58:	20000226 	beq	r4,zero,10b64 <__muldf3+0x284>
   10b5c:	5b64b03a 	or	r18,r11,r13
   10b60:	63a6b03a 	or	r19,r12,r14
   10b64:	7abfed36 	bltu	r15,r10,10b1c <__muldf3+0x23c>
   10b68:	da001015 	stw	r8,64(sp)
   10b6c:	00840034 	movhi	r2,4096
   10b70:	10bfffc4 	addi	r2,r2,-1
   10b74:	12801436 	bltu	r2,r10,10bc8 <__muldf3+0x2e8>
   10b78:	da001017 	ldw	r8,64(sp)
   10b7c:	101f883a 	mov	r15,r2
   10b80:	4a45883a 	add	r2,r9,r9
   10b84:	124d803a 	cmpltu	r6,r2,r9
   10b88:	5287883a 	add	r3,r10,r10
   10b8c:	9497883a 	add	r11,r18,r18
   10b90:	5c8f803a 	cmpltu	r7,r11,r18
   10b94:	9cd9883a 	add	r12,r19,r19
   10b98:	01000044 	movi	r4,1
   10b9c:	30cd883a 	add	r6,r6,r3
   10ba0:	3b0f883a 	add	r7,r7,r12
   10ba4:	423fffc4 	addi	r8,r8,-1
   10ba8:	1013883a 	mov	r9,r2
   10bac:	3015883a 	mov	r10,r6
   10bb0:	111ab03a 	or	r13,r2,r4
   10bb4:	98003016 	blt	r19,zero,10c78 <__muldf3+0x398>
   10bb8:	5825883a 	mov	r18,r11
   10bbc:	3827883a 	mov	r19,r7
   10bc0:	7abfef2e 	bgeu	r15,r10,10b80 <__muldf3+0x2a0>
   10bc4:	da001015 	stw	r8,64(sp)
   10bc8:	00803fc4 	movi	r2,255
   10bcc:	488e703a 	and	r7,r9,r2
   10bd0:	00802004 	movi	r2,128
   10bd4:	0007883a 	mov	r3,zero
   10bd8:	0011883a 	mov	r8,zero
   10bdc:	38801826 	beq	r7,r2,10c40 <__muldf3+0x360>
   10be0:	008000c4 	movi	r2,3
   10be4:	d9000e04 	addi	r4,sp,56
   10be8:	da801215 	stw	r10,72(sp)
   10bec:	d8800e15 	stw	r2,56(sp)
   10bf0:	da401115 	stw	r9,68(sp)
   10bf4:	003f6a06 	br	109a0 <__muldf3+0xc0>
   10bf8:	89802126 	beq	r17,r6,10c80 <__muldf3+0x3a0>
   10bfc:	0009883a 	mov	r4,zero
   10c00:	5105883a 	add	r2,r10,r4
   10c04:	128d803a 	cmpltu	r6,r2,r10
   10c08:	5d07883a 	add	r3,r11,r20
   10c0c:	30cd883a 	add	r6,r6,r3
   10c10:	0021883a 	mov	r16,zero
   10c14:	0023883a 	mov	r17,zero
   10c18:	1025883a 	mov	r18,r2
   10c1c:	3027883a 	mov	r19,r6
   10c20:	32ff9e2e 	bgeu	r6,r11,10a9c <__muldf3+0x1bc>
   10c24:	00800044 	movi	r2,1
   10c28:	8089883a 	add	r4,r16,r2
   10c2c:	240d803a 	cmpltu	r6,r4,r16
   10c30:	344d883a 	add	r6,r6,r17
   10c34:	2021883a 	mov	r16,r4
   10c38:	3023883a 	mov	r17,r6
   10c3c:	003f9806 	br	10aa0 <__muldf3+0x1c0>
   10c40:	403fe71e 	bne	r8,zero,10be0 <__muldf3+0x300>
   10c44:	01004004 	movi	r4,256
   10c48:	4904703a 	and	r2,r9,r4
   10c4c:	10c4b03a 	or	r2,r2,r3
   10c50:	103fe31e 	bne	r2,zero,10be0 <__muldf3+0x300>
   10c54:	94c4b03a 	or	r2,r18,r19
   10c58:	103fe126 	beq	r2,zero,10be0 <__muldf3+0x300>
   10c5c:	49c5883a 	add	r2,r9,r7
   10c60:	1251803a 	cmpltu	r8,r2,r9
   10c64:	4291883a 	add	r8,r8,r10
   10c68:	013fc004 	movi	r4,-256
   10c6c:	1112703a 	and	r9,r2,r4
   10c70:	4015883a 	mov	r10,r8
   10c74:	003fda06 	br	10be0 <__muldf3+0x300>
   10c78:	6813883a 	mov	r9,r13
   10c7c:	003fce06 	br	10bb8 <__muldf3+0x2d8>
   10c80:	143f7c36 	bltu	r2,r16,10a74 <__muldf3+0x194>
   10c84:	003fdd06 	br	10bfc <__muldf3+0x31c>
   10c88:	12bf852e 	bgeu	r2,r10,10aa0 <__muldf3+0x1c0>
   10c8c:	003fe506 	br	10c24 <__muldf3+0x344>
   10c90:	00800084 	movi	r2,2
   10c94:	20bf351e 	bne	r4,r2,1096c <__muldf3+0x8c>
   10c98:	01000074 	movhi	r4,1
   10c9c:	2106ce04 	addi	r4,r4,6968
   10ca0:	003f3f06 	br	109a0 <__muldf3+0xc0>

00010ca4 <__gedf2>:
   10ca4:	deffef04 	addi	sp,sp,-68
   10ca8:	dc400f15 	stw	r17,60(sp)
   10cac:	dc400404 	addi	r17,sp,16
   10cb0:	2005883a 	mov	r2,r4
   10cb4:	2807883a 	mov	r3,r5
   10cb8:	dc000e15 	stw	r16,56(sp)
   10cbc:	d809883a 	mov	r4,sp
   10cc0:	880b883a 	mov	r5,r17
   10cc4:	dc000904 	addi	r16,sp,36
   10cc8:	d8c00115 	stw	r3,4(sp)
   10ccc:	d8800015 	stw	r2,0(sp)
   10cd0:	d9800215 	stw	r6,8(sp)
   10cd4:	dfc01015 	stw	ra,64(sp)
   10cd8:	d9c00315 	stw	r7,12(sp)
   10cdc:	00114500 	call	11450 <__unpack_d>
   10ce0:	d9000204 	addi	r4,sp,8
   10ce4:	800b883a 	mov	r5,r16
   10ce8:	00114500 	call	11450 <__unpack_d>
   10cec:	d8800417 	ldw	r2,16(sp)
   10cf0:	00c00044 	movi	r3,1
   10cf4:	01bfffc4 	movi	r6,-1
   10cf8:	1880062e 	bgeu	r3,r2,10d14 <__gedf2+0x70>
   10cfc:	d8800917 	ldw	r2,36(sp)
   10d00:	8809883a 	mov	r4,r17
   10d04:	800b883a 	mov	r5,r16
   10d08:	1880022e 	bgeu	r3,r2,10d14 <__gedf2+0x70>
   10d0c:	00115880 	call	11588 <__fpcmp_parts_d>
   10d10:	100d883a 	mov	r6,r2
   10d14:	3005883a 	mov	r2,r6
   10d18:	dfc01017 	ldw	ra,64(sp)
   10d1c:	dc400f17 	ldw	r17,60(sp)
   10d20:	dc000e17 	ldw	r16,56(sp)
   10d24:	dec01104 	addi	sp,sp,68
   10d28:	f800283a 	ret

00010d2c <__fixdfsi>:
   10d2c:	defff804 	addi	sp,sp,-32
   10d30:	2005883a 	mov	r2,r4
   10d34:	2807883a 	mov	r3,r5
   10d38:	d809883a 	mov	r4,sp
   10d3c:	d9400204 	addi	r5,sp,8
   10d40:	d8c00115 	stw	r3,4(sp)
   10d44:	d8800015 	stw	r2,0(sp)
   10d48:	dfc00715 	stw	ra,28(sp)
   10d4c:	00114500 	call	11450 <__unpack_d>
   10d50:	d8c00217 	ldw	r3,8(sp)
   10d54:	00800084 	movi	r2,2
   10d58:	1880051e 	bne	r3,r2,10d70 <__fixdfsi+0x44>
   10d5c:	0007883a 	mov	r3,zero
   10d60:	1805883a 	mov	r2,r3
   10d64:	dfc00717 	ldw	ra,28(sp)
   10d68:	dec00804 	addi	sp,sp,32
   10d6c:	f800283a 	ret
   10d70:	00800044 	movi	r2,1
   10d74:	10fff92e 	bgeu	r2,r3,10d5c <__fixdfsi+0x30>
   10d78:	00800104 	movi	r2,4
   10d7c:	18800426 	beq	r3,r2,10d90 <__fixdfsi+0x64>
   10d80:	d8c00417 	ldw	r3,16(sp)
   10d84:	183ff516 	blt	r3,zero,10d5c <__fixdfsi+0x30>
   10d88:	00800784 	movi	r2,30
   10d8c:	10c0080e 	bge	r2,r3,10db0 <__fixdfsi+0x84>
   10d90:	d8800317 	ldw	r2,12(sp)
   10d94:	1000121e 	bne	r2,zero,10de0 <__fixdfsi+0xb4>
   10d98:	00e00034 	movhi	r3,32768
   10d9c:	18ffffc4 	addi	r3,r3,-1
   10da0:	1805883a 	mov	r2,r3
   10da4:	dfc00717 	ldw	ra,28(sp)
   10da8:	dec00804 	addi	sp,sp,32
   10dac:	f800283a 	ret
   10db0:	00800f04 	movi	r2,60
   10db4:	10d1c83a 	sub	r8,r2,r3
   10db8:	40bff804 	addi	r2,r8,-32
   10dbc:	d9800517 	ldw	r6,20(sp)
   10dc0:	d9c00617 	ldw	r7,24(sp)
   10dc4:	10000816 	blt	r2,zero,10de8 <__fixdfsi+0xbc>
   10dc8:	3888d83a 	srl	r4,r7,r2
   10dcc:	d8800317 	ldw	r2,12(sp)
   10dd0:	2007883a 	mov	r3,r4
   10dd4:	103fe226 	beq	r2,zero,10d60 <__fixdfsi+0x34>
   10dd8:	0107c83a 	sub	r3,zero,r4
   10ddc:	003fe006 	br	10d60 <__fixdfsi+0x34>
   10de0:	00e00034 	movhi	r3,32768
   10de4:	003fde06 	br	10d60 <__fixdfsi+0x34>
   10de8:	39c7883a 	add	r3,r7,r7
   10dec:	008007c4 	movi	r2,31
   10df0:	1205c83a 	sub	r2,r2,r8
   10df4:	1886983a 	sll	r3,r3,r2
   10df8:	3208d83a 	srl	r4,r6,r8
   10dfc:	1908b03a 	or	r4,r3,r4
   10e00:	003ff206 	br	10dcc <__fixdfsi+0xa0>

00010e04 <__floatunsidf>:
   10e04:	defff204 	addi	sp,sp,-56
   10e08:	dfc00d15 	stw	ra,52(sp)
   10e0c:	ddc00c15 	stw	r23,48(sp)
   10e10:	dd800b15 	stw	r22,44(sp)
   10e14:	dd400a15 	stw	r21,40(sp)
   10e18:	dd000915 	stw	r20,36(sp)
   10e1c:	dcc00815 	stw	r19,32(sp)
   10e20:	dc800715 	stw	r18,28(sp)
   10e24:	dc400615 	stw	r17,24(sp)
   10e28:	dc000515 	stw	r16,20(sp)
   10e2c:	d8000115 	stw	zero,4(sp)
   10e30:	20000f1e 	bne	r4,zero,10e70 <__floatunsidf+0x6c>
   10e34:	00800084 	movi	r2,2
   10e38:	d8800015 	stw	r2,0(sp)
   10e3c:	d809883a 	mov	r4,sp
   10e40:	001113c0 	call	1113c <__pack_d>
   10e44:	dfc00d17 	ldw	ra,52(sp)
   10e48:	ddc00c17 	ldw	r23,48(sp)
   10e4c:	dd800b17 	ldw	r22,44(sp)
   10e50:	dd400a17 	ldw	r21,40(sp)
   10e54:	dd000917 	ldw	r20,36(sp)
   10e58:	dcc00817 	ldw	r19,32(sp)
   10e5c:	dc800717 	ldw	r18,28(sp)
   10e60:	dc400617 	ldw	r17,24(sp)
   10e64:	dc000517 	ldw	r16,20(sp)
   10e68:	dec00e04 	addi	sp,sp,56
   10e6c:	f800283a 	ret
   10e70:	008000c4 	movi	r2,3
   10e74:	00c00f04 	movi	r3,60
   10e78:	002f883a 	mov	r23,zero
   10e7c:	202d883a 	mov	r22,r4
   10e80:	d8800015 	stw	r2,0(sp)
   10e84:	d8c00215 	stw	r3,8(sp)
   10e88:	d9000315 	stw	r4,12(sp)
   10e8c:	ddc00415 	stw	r23,16(sp)
   10e90:	00110bc0 	call	110bc <__clzsi2>
   10e94:	12400744 	addi	r9,r2,29
   10e98:	48000b16 	blt	r9,zero,10ec8 <__floatunsidf+0xc4>
   10e9c:	483fe726 	beq	r9,zero,10e3c <__floatunsidf+0x38>
   10ea0:	10bfff44 	addi	r2,r2,-3
   10ea4:	10002e16 	blt	r2,zero,10f60 <__floatunsidf+0x15c>
   10ea8:	b0a2983a 	sll	r17,r22,r2
   10eac:	0021883a 	mov	r16,zero
   10eb0:	d8800217 	ldw	r2,8(sp)
   10eb4:	dc400415 	stw	r17,16(sp)
   10eb8:	dc000315 	stw	r16,12(sp)
   10ebc:	1245c83a 	sub	r2,r2,r9
   10ec0:	d8800215 	stw	r2,8(sp)
   10ec4:	003fdd06 	br	10e3c <__floatunsidf+0x38>
   10ec8:	0255c83a 	sub	r10,zero,r9
   10ecc:	51bff804 	addi	r6,r10,-32
   10ed0:	30001b16 	blt	r6,zero,10f40 <__floatunsidf+0x13c>
   10ed4:	b9a8d83a 	srl	r20,r23,r6
   10ed8:	002b883a 	mov	r21,zero
   10edc:	000f883a 	mov	r7,zero
   10ee0:	01000044 	movi	r4,1
   10ee4:	0011883a 	mov	r8,zero
   10ee8:	30002516 	blt	r6,zero,10f80 <__floatunsidf+0x17c>
   10eec:	21a6983a 	sll	r19,r4,r6
   10ef0:	0025883a 	mov	r18,zero
   10ef4:	00bfffc4 	movi	r2,-1
   10ef8:	9089883a 	add	r4,r18,r2
   10efc:	988b883a 	add	r5,r19,r2
   10f00:	248d803a 	cmpltu	r6,r4,r18
   10f04:	314b883a 	add	r5,r6,r5
   10f08:	b104703a 	and	r2,r22,r4
   10f0c:	b946703a 	and	r3,r23,r5
   10f10:	10c4b03a 	or	r2,r2,r3
   10f14:	10000226 	beq	r2,zero,10f20 <__floatunsidf+0x11c>
   10f18:	01c00044 	movi	r7,1
   10f1c:	0011883a 	mov	r8,zero
   10f20:	d9000217 	ldw	r4,8(sp)
   10f24:	a1c4b03a 	or	r2,r20,r7
   10f28:	aa06b03a 	or	r3,r21,r8
   10f2c:	2249c83a 	sub	r4,r4,r9
   10f30:	d8c00415 	stw	r3,16(sp)
   10f34:	d9000215 	stw	r4,8(sp)
   10f38:	d8800315 	stw	r2,12(sp)
   10f3c:	003fbf06 	br	10e3c <__floatunsidf+0x38>
   10f40:	bdc7883a 	add	r3,r23,r23
   10f44:	008007c4 	movi	r2,31
   10f48:	1285c83a 	sub	r2,r2,r10
   10f4c:	1886983a 	sll	r3,r3,r2
   10f50:	b2a8d83a 	srl	r20,r22,r10
   10f54:	baaad83a 	srl	r21,r23,r10
   10f58:	1d28b03a 	or	r20,r3,r20
   10f5c:	003fdf06 	br	10edc <__floatunsidf+0xd8>
   10f60:	b006d07a 	srli	r3,r22,1
   10f64:	008007c4 	movi	r2,31
   10f68:	1245c83a 	sub	r2,r2,r9
   10f6c:	1886d83a 	srl	r3,r3,r2
   10f70:	ba62983a 	sll	r17,r23,r9
   10f74:	b260983a 	sll	r16,r22,r9
   10f78:	1c62b03a 	or	r17,r3,r17
   10f7c:	003fcc06 	br	10eb0 <__floatunsidf+0xac>
   10f80:	2006d07a 	srli	r3,r4,1
   10f84:	008007c4 	movi	r2,31
   10f88:	1285c83a 	sub	r2,r2,r10
   10f8c:	18a6d83a 	srl	r19,r3,r2
   10f90:	22a4983a 	sll	r18,r4,r10
   10f94:	003fd706 	br	10ef4 <__floatunsidf+0xf0>

00010f98 <__muldi3>:
   10f98:	defff204 	addi	sp,sp,-56
   10f9c:	df000c15 	stw	fp,48(sp)
   10fa0:	3038d43a 	srli	fp,r6,16
   10fa4:	dd000815 	stw	r20,32(sp)
   10fa8:	dc400515 	stw	r17,20(sp)
   10fac:	2028d43a 	srli	r20,r4,16
   10fb0:	247fffcc 	andi	r17,r4,65535
   10fb4:	dc000415 	stw	r16,16(sp)
   10fb8:	343fffcc 	andi	r16,r6,65535
   10fbc:	dcc00715 	stw	r19,28(sp)
   10fc0:	d9000015 	stw	r4,0(sp)
   10fc4:	2827883a 	mov	r19,r5
   10fc8:	8809883a 	mov	r4,r17
   10fcc:	d9400115 	stw	r5,4(sp)
   10fd0:	800b883a 	mov	r5,r16
   10fd4:	d9800215 	stw	r6,8(sp)
   10fd8:	dfc00d15 	stw	ra,52(sp)
   10fdc:	d9c00315 	stw	r7,12(sp)
   10fe0:	dd800a15 	stw	r22,40(sp)
   10fe4:	dd400915 	stw	r21,36(sp)
   10fe8:	302d883a 	mov	r22,r6
   10fec:	ddc00b15 	stw	r23,44(sp)
   10ff0:	dc800615 	stw	r18,24(sp)
   10ff4:	00116500 	call	11650 <__mulsi3>
   10ff8:	8809883a 	mov	r4,r17
   10ffc:	e00b883a 	mov	r5,fp
   11000:	102b883a 	mov	r21,r2
   11004:	00116500 	call	11650 <__mulsi3>
   11008:	800b883a 	mov	r5,r16
   1100c:	a009883a 	mov	r4,r20
   11010:	1023883a 	mov	r17,r2
   11014:	00116500 	call	11650 <__mulsi3>
   11018:	a009883a 	mov	r4,r20
   1101c:	e00b883a 	mov	r5,fp
   11020:	1021883a 	mov	r16,r2
   11024:	00116500 	call	11650 <__mulsi3>
   11028:	a8ffffcc 	andi	r3,r21,65535
   1102c:	a82ad43a 	srli	r21,r21,16
   11030:	8c23883a 	add	r17,r17,r16
   11034:	1011883a 	mov	r8,r2
   11038:	ac6b883a 	add	r21,r21,r17
   1103c:	a804943a 	slli	r2,r21,16
   11040:	b009883a 	mov	r4,r22
   11044:	980b883a 	mov	r5,r19
   11048:	10c7883a 	add	r3,r2,r3
   1104c:	a812d43a 	srli	r9,r21,16
   11050:	180d883a 	mov	r6,r3
   11054:	ac00022e 	bgeu	r21,r16,11060 <__muldi3+0xc8>
   11058:	00800074 	movhi	r2,1
   1105c:	4091883a 	add	r8,r8,r2
   11060:	4267883a 	add	r19,r8,r9
   11064:	302d883a 	mov	r22,r6
   11068:	00116500 	call	11650 <__mulsi3>
   1106c:	d9400317 	ldw	r5,12(sp)
   11070:	d9000017 	ldw	r4,0(sp)
   11074:	1023883a 	mov	r17,r2
   11078:	00116500 	call	11650 <__mulsi3>
   1107c:	14cb883a 	add	r5,r2,r19
   11080:	894b883a 	add	r5,r17,r5
   11084:	b005883a 	mov	r2,r22
   11088:	2807883a 	mov	r3,r5
   1108c:	dfc00d17 	ldw	ra,52(sp)
   11090:	df000c17 	ldw	fp,48(sp)
   11094:	ddc00b17 	ldw	r23,44(sp)
   11098:	dd800a17 	ldw	r22,40(sp)
   1109c:	dd400917 	ldw	r21,36(sp)
   110a0:	dd000817 	ldw	r20,32(sp)
   110a4:	dcc00717 	ldw	r19,28(sp)
   110a8:	dc800617 	ldw	r18,24(sp)
   110ac:	dc400517 	ldw	r17,20(sp)
   110b0:	dc000417 	ldw	r16,16(sp)
   110b4:	dec00e04 	addi	sp,sp,56
   110b8:	f800283a 	ret

000110bc <__clzsi2>:
   110bc:	00bfffd4 	movui	r2,65535
   110c0:	11000e36 	bltu	r2,r4,110fc <__clzsi2+0x40>
   110c4:	00803fc4 	movi	r2,255
   110c8:	01400204 	movi	r5,8
   110cc:	0007883a 	mov	r3,zero
   110d0:	11001036 	bltu	r2,r4,11114 <__clzsi2+0x58>
   110d4:	000b883a 	mov	r5,zero
   110d8:	20c6d83a 	srl	r3,r4,r3
   110dc:	00800074 	movhi	r2,1
   110e0:	1086d304 	addi	r2,r2,6988
   110e4:	1887883a 	add	r3,r3,r2
   110e8:	18800003 	ldbu	r2,0(r3)
   110ec:	00c00804 	movi	r3,32
   110f0:	2885883a 	add	r2,r5,r2
   110f4:	1885c83a 	sub	r2,r3,r2
   110f8:	f800283a 	ret
   110fc:	01400404 	movi	r5,16
   11100:	00804034 	movhi	r2,256
   11104:	10bfffc4 	addi	r2,r2,-1
   11108:	2807883a 	mov	r3,r5
   1110c:	113ff22e 	bgeu	r2,r4,110d8 <__clzsi2+0x1c>
   11110:	01400604 	movi	r5,24
   11114:	2807883a 	mov	r3,r5
   11118:	20c6d83a 	srl	r3,r4,r3
   1111c:	00800074 	movhi	r2,1
   11120:	1086d304 	addi	r2,r2,6988
   11124:	1887883a 	add	r3,r3,r2
   11128:	18800003 	ldbu	r2,0(r3)
   1112c:	00c00804 	movi	r3,32
   11130:	2885883a 	add	r2,r5,r2
   11134:	1885c83a 	sub	r2,r3,r2
   11138:	f800283a 	ret

0001113c <__pack_d>:
   1113c:	20c00017 	ldw	r3,0(r4)
   11140:	defffd04 	addi	sp,sp,-12
   11144:	dc000015 	stw	r16,0(sp)
   11148:	dc800215 	stw	r18,8(sp)
   1114c:	dc400115 	stw	r17,4(sp)
   11150:	00800044 	movi	r2,1
   11154:	22000317 	ldw	r8,12(r4)
   11158:	001f883a 	mov	r15,zero
   1115c:	22400417 	ldw	r9,16(r4)
   11160:	24000117 	ldw	r16,4(r4)
   11164:	10c0552e 	bgeu	r2,r3,112bc <__pack_d+0x180>
   11168:	00800104 	movi	r2,4
   1116c:	18804f26 	beq	r3,r2,112ac <__pack_d+0x170>
   11170:	00800084 	movi	r2,2
   11174:	18800226 	beq	r3,r2,11180 <__pack_d+0x44>
   11178:	4244b03a 	or	r2,r8,r9
   1117c:	10001a1e 	bne	r2,zero,111e8 <__pack_d+0xac>
   11180:	000d883a 	mov	r6,zero
   11184:	000f883a 	mov	r7,zero
   11188:	0011883a 	mov	r8,zero
   1118c:	00800434 	movhi	r2,16
   11190:	10bfffc4 	addi	r2,r2,-1
   11194:	301d883a 	mov	r14,r6
   11198:	3884703a 	and	r2,r7,r2
   1119c:	400a953a 	slli	r5,r8,20
   111a0:	79bffc2c 	andhi	r6,r15,65520
   111a4:	308cb03a 	or	r6,r6,r2
   111a8:	00e00434 	movhi	r3,32784
   111ac:	18ffffc4 	addi	r3,r3,-1
   111b0:	800497fa 	slli	r2,r16,31
   111b4:	30c6703a 	and	r3,r6,r3
   111b8:	1946b03a 	or	r3,r3,r5
   111bc:	01600034 	movhi	r5,32768
   111c0:	297fffc4 	addi	r5,r5,-1
   111c4:	194a703a 	and	r5,r3,r5
   111c8:	288ab03a 	or	r5,r5,r2
   111cc:	2807883a 	mov	r3,r5
   111d0:	7005883a 	mov	r2,r14
   111d4:	dc800217 	ldw	r18,8(sp)
   111d8:	dc400117 	ldw	r17,4(sp)
   111dc:	dc000017 	ldw	r16,0(sp)
   111e0:	dec00304 	addi	sp,sp,12
   111e4:	f800283a 	ret
   111e8:	21000217 	ldw	r4,8(r4)
   111ec:	00bf0084 	movi	r2,-1022
   111f0:	20803f16 	blt	r4,r2,112f0 <__pack_d+0x1b4>
   111f4:	0080ffc4 	movi	r2,1023
   111f8:	11002c16 	blt	r2,r4,112ac <__pack_d+0x170>
   111fc:	00803fc4 	movi	r2,255
   11200:	408c703a 	and	r6,r8,r2
   11204:	00802004 	movi	r2,128
   11208:	0007883a 	mov	r3,zero
   1120c:	000f883a 	mov	r7,zero
   11210:	2280ffc4 	addi	r10,r4,1023
   11214:	30801e26 	beq	r6,r2,11290 <__pack_d+0x154>
   11218:	00801fc4 	movi	r2,127
   1121c:	4089883a 	add	r4,r8,r2
   11220:	220d803a 	cmpltu	r6,r4,r8
   11224:	324d883a 	add	r6,r6,r9
   11228:	2011883a 	mov	r8,r4
   1122c:	3013883a 	mov	r9,r6
   11230:	00880034 	movhi	r2,8192
   11234:	10bfffc4 	addi	r2,r2,-1
   11238:	12400d36 	bltu	r2,r9,11270 <__pack_d+0x134>
   1123c:	4804963a 	slli	r2,r9,24
   11240:	400cd23a 	srli	r6,r8,8
   11244:	480ed23a 	srli	r7,r9,8
   11248:	013fffc4 	movi	r4,-1
   1124c:	118cb03a 	or	r6,r2,r6
   11250:	01400434 	movhi	r5,16
   11254:	297fffc4 	addi	r5,r5,-1
   11258:	3104703a 	and	r2,r6,r4
   1125c:	3946703a 	and	r3,r7,r5
   11260:	5201ffcc 	andi	r8,r10,2047
   11264:	100d883a 	mov	r6,r2
   11268:	180f883a 	mov	r7,r3
   1126c:	003fc706 	br	1118c <__pack_d+0x50>
   11270:	480897fa 	slli	r4,r9,31
   11274:	4004d07a 	srli	r2,r8,1
   11278:	4806d07a 	srli	r3,r9,1
   1127c:	52800044 	addi	r10,r10,1
   11280:	2084b03a 	or	r2,r4,r2
   11284:	1011883a 	mov	r8,r2
   11288:	1813883a 	mov	r9,r3
   1128c:	003feb06 	br	1123c <__pack_d+0x100>
   11290:	383fe11e 	bne	r7,zero,11218 <__pack_d+0xdc>
   11294:	01004004 	movi	r4,256
   11298:	4104703a 	and	r2,r8,r4
   1129c:	10c4b03a 	or	r2,r2,r3
   112a0:	103fe326 	beq	r2,zero,11230 <__pack_d+0xf4>
   112a4:	3005883a 	mov	r2,r6
   112a8:	003fdc06 	br	1121c <__pack_d+0xe0>
   112ac:	000d883a 	mov	r6,zero
   112b0:	000f883a 	mov	r7,zero
   112b4:	0201ffc4 	movi	r8,2047
   112b8:	003fb406 	br	1118c <__pack_d+0x50>
   112bc:	0005883a 	mov	r2,zero
   112c0:	00c00234 	movhi	r3,8
   112c4:	408cb03a 	or	r6,r8,r2
   112c8:	48ceb03a 	or	r7,r9,r3
   112cc:	013fffc4 	movi	r4,-1
   112d0:	01400434 	movhi	r5,16
   112d4:	297fffc4 	addi	r5,r5,-1
   112d8:	3104703a 	and	r2,r6,r4
   112dc:	3946703a 	and	r3,r7,r5
   112e0:	100d883a 	mov	r6,r2
   112e4:	180f883a 	mov	r7,r3
   112e8:	0201ffc4 	movi	r8,2047
   112ec:	003fa706 	br	1118c <__pack_d+0x50>
   112f0:	1109c83a 	sub	r4,r2,r4
   112f4:	00800e04 	movi	r2,56
   112f8:	11004316 	blt	r2,r4,11408 <__pack_d+0x2cc>
   112fc:	21fff804 	addi	r7,r4,-32
   11300:	38004516 	blt	r7,zero,11418 <__pack_d+0x2dc>
   11304:	49d8d83a 	srl	r12,r9,r7
   11308:	001b883a 	mov	r13,zero
   1130c:	0023883a 	mov	r17,zero
   11310:	01400044 	movi	r5,1
   11314:	0025883a 	mov	r18,zero
   11318:	38004716 	blt	r7,zero,11438 <__pack_d+0x2fc>
   1131c:	29d6983a 	sll	r11,r5,r7
   11320:	0015883a 	mov	r10,zero
   11324:	00bfffc4 	movi	r2,-1
   11328:	5089883a 	add	r4,r10,r2
   1132c:	588b883a 	add	r5,r11,r2
   11330:	228d803a 	cmpltu	r6,r4,r10
   11334:	314b883a 	add	r5,r6,r5
   11338:	4104703a 	and	r2,r8,r4
   1133c:	4946703a 	and	r3,r9,r5
   11340:	10c4b03a 	or	r2,r2,r3
   11344:	10000226 	beq	r2,zero,11350 <__pack_d+0x214>
   11348:	04400044 	movi	r17,1
   1134c:	0025883a 	mov	r18,zero
   11350:	00803fc4 	movi	r2,255
   11354:	644eb03a 	or	r7,r12,r17
   11358:	3892703a 	and	r9,r7,r2
   1135c:	00802004 	movi	r2,128
   11360:	6c90b03a 	or	r8,r13,r18
   11364:	0015883a 	mov	r10,zero
   11368:	48801626 	beq	r9,r2,113c4 <__pack_d+0x288>
   1136c:	01001fc4 	movi	r4,127
   11370:	3905883a 	add	r2,r7,r4
   11374:	11cd803a 	cmpltu	r6,r2,r7
   11378:	320d883a 	add	r6,r6,r8
   1137c:	100f883a 	mov	r7,r2
   11380:	00840034 	movhi	r2,4096
   11384:	10bfffc4 	addi	r2,r2,-1
   11388:	3011883a 	mov	r8,r6
   1138c:	0007883a 	mov	r3,zero
   11390:	11801b36 	bltu	r2,r6,11400 <__pack_d+0x2c4>
   11394:	4004963a 	slli	r2,r8,24
   11398:	3808d23a 	srli	r4,r7,8
   1139c:	400ad23a 	srli	r5,r8,8
   113a0:	1813883a 	mov	r9,r3
   113a4:	1108b03a 	or	r4,r2,r4
   113a8:	00bfffc4 	movi	r2,-1
   113ac:	00c00434 	movhi	r3,16
   113b0:	18ffffc4 	addi	r3,r3,-1
   113b4:	208c703a 	and	r6,r4,r2
   113b8:	28ce703a 	and	r7,r5,r3
   113bc:	4a01ffcc 	andi	r8,r9,2047
   113c0:	003f7206 	br	1118c <__pack_d+0x50>
   113c4:	503fe91e 	bne	r10,zero,1136c <__pack_d+0x230>
   113c8:	01004004 	movi	r4,256
   113cc:	3904703a 	and	r2,r7,r4
   113d0:	0007883a 	mov	r3,zero
   113d4:	10c4b03a 	or	r2,r2,r3
   113d8:	10000626 	beq	r2,zero,113f4 <__pack_d+0x2b8>
   113dc:	3a45883a 	add	r2,r7,r9
   113e0:	11cd803a 	cmpltu	r6,r2,r7
   113e4:	320d883a 	add	r6,r6,r8
   113e8:	100f883a 	mov	r7,r2
   113ec:	3011883a 	mov	r8,r6
   113f0:	0007883a 	mov	r3,zero
   113f4:	00840034 	movhi	r2,4096
   113f8:	10bfffc4 	addi	r2,r2,-1
   113fc:	123fe52e 	bgeu	r2,r8,11394 <__pack_d+0x258>
   11400:	00c00044 	movi	r3,1
   11404:	003fe306 	br	11394 <__pack_d+0x258>
   11408:	0009883a 	mov	r4,zero
   1140c:	0013883a 	mov	r9,zero
   11410:	000b883a 	mov	r5,zero
   11414:	003fe406 	br	113a8 <__pack_d+0x26c>
   11418:	4a47883a 	add	r3,r9,r9
   1141c:	008007c4 	movi	r2,31
   11420:	1105c83a 	sub	r2,r2,r4
   11424:	1886983a 	sll	r3,r3,r2
   11428:	4118d83a 	srl	r12,r8,r4
   1142c:	491ad83a 	srl	r13,r9,r4
   11430:	1b18b03a 	or	r12,r3,r12
   11434:	003fb506 	br	1130c <__pack_d+0x1d0>
   11438:	2806d07a 	srli	r3,r5,1
   1143c:	008007c4 	movi	r2,31
   11440:	1105c83a 	sub	r2,r2,r4
   11444:	1896d83a 	srl	r11,r3,r2
   11448:	2914983a 	sll	r10,r5,r4
   1144c:	003fb506 	br	11324 <__pack_d+0x1e8>

00011450 <__unpack_d>:
   11450:	20c00117 	ldw	r3,4(r4)
   11454:	22400017 	ldw	r9,0(r4)
   11458:	00800434 	movhi	r2,16
   1145c:	10bfffc4 	addi	r2,r2,-1
   11460:	1808d53a 	srli	r4,r3,20
   11464:	180cd7fa 	srli	r6,r3,31
   11468:	1894703a 	and	r10,r3,r2
   1146c:	2201ffcc 	andi	r8,r4,2047
   11470:	281b883a 	mov	r13,r5
   11474:	4817883a 	mov	r11,r9
   11478:	29800115 	stw	r6,4(r5)
   1147c:	5019883a 	mov	r12,r10
   11480:	40001e1e 	bne	r8,zero,114fc <__unpack_d+0xac>
   11484:	4a84b03a 	or	r2,r9,r10
   11488:	10001926 	beq	r2,zero,114f0 <__unpack_d+0xa0>
   1148c:	4804d63a 	srli	r2,r9,24
   11490:	500c923a 	slli	r6,r10,8
   11494:	013f0084 	movi	r4,-1022
   11498:	00c40034 	movhi	r3,4096
   1149c:	18ffffc4 	addi	r3,r3,-1
   114a0:	118cb03a 	or	r6,r2,r6
   114a4:	008000c4 	movi	r2,3
   114a8:	480a923a 	slli	r5,r9,8
   114ac:	68800015 	stw	r2,0(r13)
   114b0:	69000215 	stw	r4,8(r13)
   114b4:	19800b36 	bltu	r3,r6,114e4 <__unpack_d+0x94>
   114b8:	200f883a 	mov	r7,r4
   114bc:	1811883a 	mov	r8,r3
   114c0:	2945883a 	add	r2,r5,r5
   114c4:	1149803a 	cmpltu	r4,r2,r5
   114c8:	3187883a 	add	r3,r6,r6
   114cc:	20c9883a 	add	r4,r4,r3
   114d0:	100b883a 	mov	r5,r2
   114d4:	200d883a 	mov	r6,r4
   114d8:	39ffffc4 	addi	r7,r7,-1
   114dc:	413ff82e 	bgeu	r8,r4,114c0 <__unpack_d+0x70>
   114e0:	69c00215 	stw	r7,8(r13)
   114e4:	69800415 	stw	r6,16(r13)
   114e8:	69400315 	stw	r5,12(r13)
   114ec:	f800283a 	ret
   114f0:	00800084 	movi	r2,2
   114f4:	28800015 	stw	r2,0(r5)
   114f8:	f800283a 	ret
   114fc:	0081ffc4 	movi	r2,2047
   11500:	40800f26 	beq	r8,r2,11540 <__unpack_d+0xf0>
   11504:	480cd63a 	srli	r6,r9,24
   11508:	5006923a 	slli	r3,r10,8
   1150c:	4804923a 	slli	r2,r9,8
   11510:	0009883a 	mov	r4,zero
   11514:	30c6b03a 	or	r3,r6,r3
   11518:	01440034 	movhi	r5,4096
   1151c:	110cb03a 	or	r6,r2,r4
   11520:	423f0044 	addi	r8,r8,-1023
   11524:	194eb03a 	or	r7,r3,r5
   11528:	008000c4 	movi	r2,3
   1152c:	69c00415 	stw	r7,16(r13)
   11530:	6a000215 	stw	r8,8(r13)
   11534:	68800015 	stw	r2,0(r13)
   11538:	69800315 	stw	r6,12(r13)
   1153c:	f800283a 	ret
   11540:	4a84b03a 	or	r2,r9,r10
   11544:	1000031e 	bne	r2,zero,11554 <__unpack_d+0x104>
   11548:	00800104 	movi	r2,4
   1154c:	28800015 	stw	r2,0(r5)
   11550:	f800283a 	ret
   11554:	0009883a 	mov	r4,zero
   11558:	01400234 	movhi	r5,8
   1155c:	4904703a 	and	r2,r9,r4
   11560:	5146703a 	and	r3,r10,r5
   11564:	10c4b03a 	or	r2,r2,r3
   11568:	10000526 	beq	r2,zero,11580 <__unpack_d+0x130>
   1156c:	00800044 	movi	r2,1
   11570:	68800015 	stw	r2,0(r13)
   11574:	6b000415 	stw	r12,16(r13)
   11578:	6ac00315 	stw	r11,12(r13)
   1157c:	f800283a 	ret
   11580:	68000015 	stw	zero,0(r13)
   11584:	003ffb06 	br	11574 <__unpack_d+0x124>

00011588 <__fpcmp_parts_d>:
   11588:	21800017 	ldw	r6,0(r4)
   1158c:	00c00044 	movi	r3,1
   11590:	19800a2e 	bgeu	r3,r6,115bc <__fpcmp_parts_d+0x34>
   11594:	28800017 	ldw	r2,0(r5)
   11598:	1880082e 	bgeu	r3,r2,115bc <__fpcmp_parts_d+0x34>
   1159c:	00c00104 	movi	r3,4
   115a0:	30c02626 	beq	r6,r3,1163c <__fpcmp_parts_d+0xb4>
   115a4:	10c02226 	beq	r2,r3,11630 <__fpcmp_parts_d+0xa8>
   115a8:	00c00084 	movi	r3,2
   115ac:	30c00526 	beq	r6,r3,115c4 <__fpcmp_parts_d+0x3c>
   115b0:	10c0071e 	bne	r2,r3,115d0 <__fpcmp_parts_d+0x48>
   115b4:	20800117 	ldw	r2,4(r4)
   115b8:	1000091e 	bne	r2,zero,115e0 <__fpcmp_parts_d+0x58>
   115bc:	00800044 	movi	r2,1
   115c0:	f800283a 	ret
   115c4:	10c01a1e 	bne	r2,r3,11630 <__fpcmp_parts_d+0xa8>
   115c8:	0005883a 	mov	r2,zero
   115cc:	f800283a 	ret
   115d0:	22000117 	ldw	r8,4(r4)
   115d4:	28800117 	ldw	r2,4(r5)
   115d8:	40800326 	beq	r8,r2,115e8 <__fpcmp_parts_d+0x60>
   115dc:	403ff726 	beq	r8,zero,115bc <__fpcmp_parts_d+0x34>
   115e0:	00bfffc4 	movi	r2,-1
   115e4:	f800283a 	ret
   115e8:	20c00217 	ldw	r3,8(r4)
   115ec:	28800217 	ldw	r2,8(r5)
   115f0:	10fffa16 	blt	r2,r3,115dc <__fpcmp_parts_d+0x54>
   115f4:	18800916 	blt	r3,r2,1161c <__fpcmp_parts_d+0x94>
   115f8:	21c00417 	ldw	r7,16(r4)
   115fc:	28c00417 	ldw	r3,16(r5)
   11600:	21800317 	ldw	r6,12(r4)
   11604:	28800317 	ldw	r2,12(r5)
   11608:	19fff436 	bltu	r3,r7,115dc <__fpcmp_parts_d+0x54>
   1160c:	38c00526 	beq	r7,r3,11624 <__fpcmp_parts_d+0x9c>
   11610:	38c00236 	bltu	r7,r3,1161c <__fpcmp_parts_d+0x94>
   11614:	19ffec1e 	bne	r3,r7,115c8 <__fpcmp_parts_d+0x40>
   11618:	30bfeb2e 	bgeu	r6,r2,115c8 <__fpcmp_parts_d+0x40>
   1161c:	403fe71e 	bne	r8,zero,115bc <__fpcmp_parts_d+0x34>
   11620:	003fef06 	br	115e0 <__fpcmp_parts_d+0x58>
   11624:	11bffa2e 	bgeu	r2,r6,11610 <__fpcmp_parts_d+0x88>
   11628:	403fe426 	beq	r8,zero,115bc <__fpcmp_parts_d+0x34>
   1162c:	003fec06 	br	115e0 <__fpcmp_parts_d+0x58>
   11630:	28800117 	ldw	r2,4(r5)
   11634:	103fe11e 	bne	r2,zero,115bc <__fpcmp_parts_d+0x34>
   11638:	003fe906 	br	115e0 <__fpcmp_parts_d+0x58>
   1163c:	11bfdd1e 	bne	r2,r6,115b4 <__fpcmp_parts_d+0x2c>
   11640:	28c00117 	ldw	r3,4(r5)
   11644:	20800117 	ldw	r2,4(r4)
   11648:	1885c83a 	sub	r2,r3,r2
   1164c:	f800283a 	ret

00011650 <__mulsi3>:
   11650:	20000a26 	beq	r4,zero,1167c <__mulsi3+0x2c>
   11654:	0007883a 	mov	r3,zero
   11658:	2080004c 	andi	r2,r4,1
   1165c:	1005003a 	cmpeq	r2,r2,zero
   11660:	2008d07a 	srli	r4,r4,1
   11664:	1000011e 	bne	r2,zero,1166c <__mulsi3+0x1c>
   11668:	1947883a 	add	r3,r3,r5
   1166c:	294b883a 	add	r5,r5,r5
   11670:	203ff91e 	bne	r4,zero,11658 <__mulsi3+0x8>
   11674:	1805883a 	mov	r2,r3
   11678:	f800283a 	ret
   1167c:	0007883a 	mov	r3,zero
   11680:	1805883a 	mov	r2,r3
   11684:	f800283a 	ret

00011688 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   11688:	00800074 	movhi	r2,1
   1168c:	10872304 	addi	r2,r2,7308
   11690:	10800017 	ldw	r2,0(r2)
   11694:	00ffde84 	movi	r3,-134
   11698:	10001d26 	beq	r2,zero,11710 <alt_alarm_start+0x88>
  {
    if (alarm)
   1169c:	00fffa84 	movi	r3,-22
   116a0:	20001b26 	beq	r4,zero,11710 <alt_alarm_start+0x88>
    {
      alarm->callback = callback;
   116a4:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   116a8:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   116ac:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   116b0:	00bfff84 	movi	r2,-2
   116b4:	3084703a 	and	r2,r6,r2
   116b8:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   116bc:	00800074 	movhi	r2,1
   116c0:	10872404 	addi	r2,r2,7312
   116c4:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   116c8:	18800044 	addi	r2,r3,1
   116cc:	2885883a 	add	r2,r5,r2
   116d0:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   116d4:	10c0032e 	bgeu	r2,r3,116e4 <alt_alarm_start+0x5c>
      {
        alarm->rollover = 1;
   116d8:	00800044 	movi	r2,1
   116dc:	20800405 	stb	r2,16(r4)
   116e0:	00000106 	br	116e8 <alt_alarm_start+0x60>
      }
      else
      {
        alarm->rollover = 0;
   116e4:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   116e8:	00800074 	movhi	r2,1
   116ec:	10871404 	addi	r2,r2,7248
  entry->next     = list->next;
   116f0:	10c00017 	ldw	r3,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   116f4:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   116f8:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
   116fc:	10c00017 	ldw	r3,0(r2)
  list->next           = entry;
   11700:	11000015 	stw	r4,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
   11704:	19000115 	stw	r4,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11708:	3001703a 	wrctl	status,r6
   1170c:	0007883a 	mov	r3,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
   11710:	1805883a 	mov	r2,r3
   11714:	f800283a 	ret

00011718 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11718:	2900051e 	bne	r5,r4,11730 <alt_load_section+0x18>
   1171c:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
   11720:	20800017 	ldw	r2,0(r4)
   11724:	21000104 	addi	r4,r4,4
   11728:	28800015 	stw	r2,0(r5)
   1172c:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   11730:	29bffb1e 	bne	r5,r6,11720 <alt_load_section+0x8>
   11734:	f800283a 	ret

00011738 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   11738:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1173c:	01000074 	movhi	r4,1
   11740:	21071804 	addi	r4,r4,7264
   11744:	01400074 	movhi	r5,1
   11748:	29471304 	addi	r5,r5,7244
   1174c:	01800074 	movhi	r6,1
   11750:	31871804 	addi	r6,r6,7264
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   11754:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   11758:	00117180 	call	11718 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1175c:	01000074 	movhi	r4,1
   11760:	21000804 	addi	r4,r4,32
   11764:	01400074 	movhi	r5,1
   11768:	29400804 	addi	r5,r5,32
   1176c:	01800074 	movhi	r6,1
   11770:	31805004 	addi	r6,r6,320
   11774:	00117180 	call	11718 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   11778:	01000074 	movhi	r4,1
   1177c:	2106c604 	addi	r4,r4,6936
   11780:	01400074 	movhi	r5,1
   11784:	2946c604 	addi	r5,r5,6936
   11788:	01800074 	movhi	r6,1
   1178c:	31871304 	addi	r6,r6,7244
   11790:	00117180 	call	11718 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11794:	00119e00 	call	119e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   11798:	dfc00017 	ldw	ra,0(sp)
   1179c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   117a0:	00119e41 	jmpi	119e4 <alt_icache_flush_all>

000117a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   117a4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   117a8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   117ac:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   117b0:	00119000 	call	11900 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   117b4:	00118e80 	call	118e8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   117b8:	d1200d17 	ldw	r4,-32716(gp)
   117bc:	d1600e17 	ldw	r5,-32712(gp)
   117c0:	d1a00f17 	ldw	r6,-32708(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   117c4:	dfc00017 	ldw	ra,0(sp)
   117c8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   117cc:	00103281 	jmpi	10328 <main>

000117d0 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   117d0:	defffe04 	addi	sp,sp,-8
   117d4:	dc000015 	stw	r16,0(sp)
   117d8:	dfc00115 	stw	ra,4(sp)
   117dc:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   117e0:	0011af80 	call	11af8 <strlen>
   117e4:	800b883a 	mov	r5,r16
   117e8:	100d883a 	mov	r6,r2
   117ec:	01000074 	movhi	r4,1
   117f0:	21071604 	addi	r4,r4,7256
   117f4:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
   117f8:	dfc00117 	ldw	ra,4(sp)
   117fc:	dc000017 	ldw	r16,0(sp)
   11800:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   11804:	00119201 	jmpi	11920 <altera_avalon_jtag_uart_write>

00011808 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11808:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1180c:	00bfff84 	movi	r2,-2
   11810:	2884703a 	and	r2,r5,r2
   11814:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11818:	20c00017 	ldw	r3,0(r4)
   1181c:	20800117 	ldw	r2,4(r4)
   11820:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   11824:	20800117 	ldw	r2,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11828:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
   1182c:	10c00015 	stw	r3,0(r2)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
   11830:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11834:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
   11838:	f800283a 	ret

0001183c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1183c:	defffd04 	addi	sp,sp,-12

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11840:	d0a01117 	ldw	r2,-32700(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11844:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11848:	d4200117 	ldw	r16,-32764(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1184c:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11850:	dfc00215 	stw	ra,8(sp)
   11854:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11858:	d0a01115 	stw	r2,-32700(gp)
   1185c:	00001b06 	br	118cc <alt_tick+0x90>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11860:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   11864:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11868:	10000326 	beq	r2,zero,11878 <alt_tick+0x3c>
   1186c:	d0a01117 	ldw	r2,-32700(gp)
   11870:	1000011e 	bne	r2,zero,11878 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
   11874:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11878:	d0e01117 	ldw	r3,-32700(gp)
   1187c:	80800217 	ldw	r2,8(r16)
   11880:	18801136 	bltu	r3,r2,118c8 <alt_tick+0x8c>
   11884:	80800403 	ldbu	r2,16(r16)
   11888:	10000f1e 	bne	r2,zero,118c8 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
   1188c:	81000517 	ldw	r4,20(r16)
   11890:	80800317 	ldw	r2,12(r16)
   11894:	103ee83a 	callr	r2
   11898:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1189c:	1000031e 	bne	r2,zero,118ac <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
   118a0:	8009883a 	mov	r4,r16
   118a4:	00118080 	call	11808 <alt_alarm_stop>
   118a8:	00000706 	br	118c8 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
   118ac:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   118b0:	d0e01117 	ldw	r3,-32700(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   118b4:	1105883a 	add	r2,r2,r4
   118b8:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   118bc:	10c0022e 	bgeu	r2,r3,118c8 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
   118c0:	00800044 	movi	r2,1
   118c4:	80800405 	stb	r2,16(r16)
   118c8:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   118cc:	d0a00104 	addi	r2,gp,-32764
   118d0:	80bfe31e 	bne	r16,r2,11860 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   118d4:	dfc00217 	ldw	ra,8(sp)
   118d8:	dc400117 	ldw	r17,4(sp)
   118dc:	dc000017 	ldw	r16,0(sp)
   118e0:	dec00304 	addi	sp,sp,12
   118e4:	f800283a 	ret

000118e8 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   118e8:	010000b4 	movhi	r4,2
   118ec:	21040804 	addi	r4,r4,4128
   118f0:	000b883a 	mov	r5,zero
   118f4:	01800044 	movi	r6,1
   118f8:	01c0fa04 	movi	r7,1000
   118fc:	00119541 	jmpi	11954 <alt_avalon_timer_sc_init>

00011900 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11900:	deffff04 	addi	sp,sp,-4
   11904:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   11908:	0011af00 	call	11af0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1190c:	00800044 	movi	r2,1
   11910:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11914:	dfc00017 	ldw	ra,0(sp)
   11918:	dec00104 	addi	sp,sp,4
   1191c:	f800283a 	ret

00011920 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   11920:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
   11924:	298f883a 	add	r7,r5,r6
   11928:	20c00104 	addi	r3,r4,4
   1192c:	00000606 	br	11948 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11930:	18800037 	ldwio	r2,0(r3)
   11934:	10bfffec 	andhi	r2,r2,65535
   11938:	10000326 	beq	r2,zero,11948 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   1193c:	28800007 	ldb	r2,0(r5)
   11940:	29400044 	addi	r5,r5,1
   11944:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   11948:	29fff936 	bltu	r5,r7,11930 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
   1194c:	3005883a 	mov	r2,r6
   11950:	f800283a 	ret

00011954 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   11954:	02000074 	movhi	r8,1
   11958:	42072304 	addi	r8,r8,7308
   1195c:	40800017 	ldw	r2,0(r8)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   11960:	defffe04 	addi	sp,sp,-8
   11964:	3807883a 	mov	r3,r7
   11968:	dfc00115 	stw	ra,4(sp)
   1196c:	200f883a 	mov	r7,r4
   11970:	1000011e 	bne	r2,zero,11978 <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
   11974:	40c00015 	stw	r3,0(r8)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   11978:	008001c4 	movi	r2,7
   1197c:	38800135 	stwio	r2,4(r7)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   11980:	2809883a 	mov	r4,r5
   11984:	300b883a 	mov	r5,r6
   11988:	01800074 	movhi	r6,1
   1198c:	31866904 	addi	r6,r6,6564
   11990:	d8000015 	stw	zero,0(sp)
   11994:	0011a800 	call	11a80 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   11998:	dfc00117 	ldw	ra,4(sp)
   1199c:	dec00204 	addi	sp,sp,8
   119a0:	f800283a 	ret

000119a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   119a4:	defffe04 	addi	sp,sp,-8
   119a8:	dfc00115 	stw	ra,4(sp)
   119ac:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   119b0:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   119b4:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   119b8:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   119bc:	00bfff84 	movi	r2,-2
   119c0:	8084703a 	and	r2,r16,r2
   119c4:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
   119c8:	001183c0 	call	1183c <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   119cc:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
   119d0:	dfc00117 	ldw	ra,4(sp)
   119d4:	dc000017 	ldw	r16,0(sp)
   119d8:	dec00204 	addi	sp,sp,8
   119dc:	f800283a 	ret

000119e0 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   119e0:	f800283a 	ret

000119e4 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   119e4:	f800283a 	ret

000119e8 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   119e8:	000530fa 	rdctl	r2,ienable
   119ec:	00c00044 	movi	r3,1
   119f0:	1946983a 	sll	r3,r3,r5
   119f4:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
   119f8:	1004c03a 	cmpne	r2,r2,zero
   119fc:	f800283a 	ret

00011a00 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a00:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a04:	00bfff84 	movi	r2,-2
   11a08:	3084703a 	and	r2,r6,r2
   11a0c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   11a10:	01000074 	movhi	r4,1
   11a14:	21072504 	addi	r4,r4,7316
   11a18:	00c00044 	movi	r3,1
   11a1c:	20800017 	ldw	r2,0(r4)
   11a20:	1946983a 	sll	r3,r3,r5
   11a24:	10c4b03a 	or	r2,r2,r3
   11a28:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11a2c:	20800017 	ldw	r2,0(r4)
   11a30:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a34:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   11a38:	0005883a 	mov	r2,zero
   11a3c:	f800283a 	ret

00011a40 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a40:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a44:	00bfff84 	movi	r2,-2
   11a48:	3084703a 	and	r2,r6,r2
   11a4c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   11a50:	01000074 	movhi	r4,1
   11a54:	21072504 	addi	r4,r4,7316
   11a58:	00ffff84 	movi	r3,-2
   11a5c:	20800017 	ldw	r2,0(r4)
   11a60:	1946183a 	rol	r3,r3,r5
   11a64:	10c4703a 	and	r2,r2,r3
   11a68:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11a6c:	20800017 	ldw	r2,0(r4)
   11a70:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a74:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   11a78:	0005883a 	mov	r2,zero
   11a7c:	f800283a 	ret

00011a80 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   11a80:	0011a841 	jmpi	11a84 <alt_iic_isr_register>

00011a84 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11a84:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11a88:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11a8c:	dfc00115 	stw	ra,4(sp)
   11a90:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11a94:	00fffa84 	movi	r3,-22
   11a98:	11401016 	blt	r2,r5,11adc <alt_iic_isr_register+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a9c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11aa0:	00bfff84 	movi	r2,-2
   11aa4:	8084703a 	and	r2,r16,r2
   11aa8:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   11aac:	280490fa 	slli	r2,r5,3
   11ab0:	00c00074 	movhi	r3,1
   11ab4:	18c72c04 	addi	r3,r3,7344
   11ab8:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = isr_context;
   11abc:	11c00115 	stw	r7,4(r2)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   11ac0:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   11ac4:	30000226 	beq	r6,zero,11ad0 <alt_iic_isr_register+0x4c>
   11ac8:	0011a000 	call	11a00 <alt_ic_irq_enable>
   11acc:	00000106 	br	11ad4 <alt_iic_isr_register+0x50>
   11ad0:	0011a400 	call	11a40 <alt_ic_irq_disable>
   11ad4:	1007883a 	mov	r3,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ad8:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   11adc:	1805883a 	mov	r2,r3
   11ae0:	dfc00117 	ldw	ra,4(sp)
   11ae4:	dc000017 	ldw	r16,0(sp)
   11ae8:	dec00204 	addi	sp,sp,8
   11aec:	f800283a 	ret

00011af0 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   11af0:	000170fa 	wrctl	ienable,zero
}
   11af4:	f800283a 	ret

00011af8 <strlen>:
   11af8:	20800007 	ldb	r2,0(r4)
   11afc:	10000526 	beq	r2,zero,11b14 <strlen+0x1c>
   11b00:	2007883a 	mov	r3,r4
   11b04:	18c00044 	addi	r3,r3,1
   11b08:	18800007 	ldb	r2,0(r3)
   11b0c:	103ffd1e 	bne	r2,zero,11b04 <strlen+0xc>
   11b10:	1905c83a 	sub	r2,r3,r4
   11b14:	f800283a 	ret
